%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (marina) ()%%Title: (1330.eps)%%CreationDate: 6/10/10 11:46 AM%%BoundingBox: 188 54 686 552%%HiResBoundingBox: 188.0811 54.8721 685.5156 551.6069%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 0.74902 0.678431 0.670588 0.901961 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 421.5 296.7754 421.5 296.7754%AI3_TileBox: 114.9448 -98.3623 726.9453 693.6377%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 841.8898 595.2756%AI5_RulerUnits: 4%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -426 778.2754 1 1806 1029 18 0 0 73 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 128 8%%BeginData: 12420 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFA8A8FD047DFD0B527D7DA8A8FD66FFA8A87DFD06527D7DA8%7DA8A8A87DA87DA87D7D525227522752527D7DA8A8FD5CFFA87D5252527D%7DA8A8FD13FFA8A87D7DFD04527DA8FD57FF7D7D525252A8A8FD1DFF7D7D%5252275252A8A8FD50FFA87D527D7DFD25FFA8A85252277D7DFD4DFFA852%527DA8FD2AFFA87D5252277D7DFD48FF7D7D52A8A8FD2FFF7D7D525252A8%FD44FFA852527DFD34FF7D525227527DFD40FFA87D52A8FD38FF7DFD0452%FD3EFF7D527DFD39FF7DA87D7D5252277DA8FD39FFA8527DA8FD3BFF7D7D%A8A85252277DA8FD36FFA87D52A8FD3EFFA87D7DA87D5227527DFD34FFA8%7D7DFD43FF7DA8A8A8525252FD32FF7D527DFD45FFA87DFFA8525227A8FD%2FFF7D7DA8FD4AFFA85252277DFD2DFF5252A8FD4BFFA87D5252277DA8FD%2AFF527DFD4DFF7DA8A87D52527DA8FD28FF527DFD4EFFA87D52A87D5227%52A8FD26FF52A8FD4DFF7D7DFFFFA852FFA8525252A8FD24FF52A8FD4EFF%525252A8FFA852A87D522752A8FD22FF52A8FD52FF7DA8FFFF52FFA85252%7DA8FD20FF527DFD54FF7DA8FFFF7DFF7D52277DA8FD1EFF527DFD56FFA8%A8FD04FF7D52527DFD1DFF7D52FD58FFA8FD04FFA82752277DFD1BFFA852%FD5FFF7D525252A8FD19FFA852A8FD5DFFA8FFA8A8525252A8FD18FF7D7D%FD5EFF5252FFFFA8275252FD17FF7D52FD5FFF7D5252A8FF7D275252FD16%FF52FD5CFFA852A8FFFF52FFA8FFFF7D5252A8FD14FF52A8FD5CFF7D5252%7DFF7D7DFFFFFFA8522752A8FD12FF7D7DFD5DFFA87DFFA8A8FF7DA8FFFF%FF7D52527DFD11FFA852A8FD5DFFA8A8FFFFFD04A8FD04FF275227A8FD10%FF7D7DFD5FFFA8FD0AFFA8525252FD0FFFA8527D7DFD69FFA85227527DFD%0EFF7D7D52A8FD69FF7D2E525252FD0DFFA8525252A8FD69FF7D27275227%A8FD0CFF7D5252A8FD6BFF7DFD0452FD0BFFA8525252FD68FFA8277DFFFF%7D5227527DFD0AFF7D5252FD69FF7D5227A8FFFF5252277DFD09FFA85252%7DFD64FFA8A8A8FFFFA8275227FFFFA8275227A8FD08FFA85252A8FD64FF%A827527DFFA87DFF7D7DFFFF7D27527DFD08FF52A8A8FD65FF527DA8A87D%FFA8FFFF7DA8FF7D522752A8FD06FFA852FD67FF7DA8FFFFFFA8FFFFFFA8%A8FFFF525227A8FD06FF7D52FD67FF7DA8FD08FFA8FFFFFD0452FD06FF52%A8FD67FFA87DFD0AFFA827525252A8FD04FFA852A852A8FD66FFA8FD0AFF%5227277D27A8FD04FFA8527D27A8FD66FFA8FD09FFA852275252527DFD04%FF527D5252A8FD70FF7D27FD0552AFFFFFFF7D52FFA8FFFF7D52FD6DFF7D%52527D527D27FFFFFFA852A8FFA8FF7D277DA8FD69FF5252FFA827527D52%52527DFFFF7D7DA8FFFFFF527DFD6AFF7D27277DA85227A87D7D277DFFFF%7D7DFFFFFF7D52A8FD65FFA8FD04FF7D275227A852527D7D525252FFFF52%A8FFFFFF7D7DFD65FF7D5252A8FFFF7D7DFF7D527DA8FF7D272752FFA852%A8FFFFFF52A8FD64FF7DFD0427FFFF7DA8FFA87D52A8FFA8272E27A8FF52%FD04FF7DA8FD5DFFA87D52A8FFFFFF7D275252277DFFA8FFFFFFA87D52FF%7D5227277D7D52A8FFFFFF52FD5DFF7D27277D527DFFFF5252A8FF7D52A8%FD05FF7D2727522752277DA852FD04FFA8A8FD5CFF5252FFFFFFA8FFFF7D%A8FFFFFF7DA8FD05FFA827522752522E597D52FD61FFA827A8FD06FF7DFD%05FFA8FD05FF7D27272E277D27527D52FFA8A8FD5EFFA852FD13FF522752%2727FD04527DA85252FD5EFFA852FD11FFA85227272752275227527D7DFF%5252A8FD5DFFA87DFD10FF7D52275227527D27527D2752A87D5252A8FD5E%FF7DFD0FFF522727522727277D2752522752A8A87DA87DFFFF7D52A8FD68%FF522727522752272E7D52527D2752A87DFFA8A8FF7D277D7DA8FD66FF7D%27275252FD04277D27525227527DFD05FF527DFD68FFA852275227A85252%2752A8527D5227277DFD04FFA852A8FD06FFA852527DFD59FF7D7D7DFFFF%7DFD0427A87D272E27A8277D27275252A8FD04FF52FD07FF52527D7DA8FD%57FF7D2727277DFF5227272E27FF7D272752A852275227525252FFFFFFA8%7DFD06FF7D52A8FFFFA8A8FD4EFFA87DA8FD04FF7D272727F827A8592727%2752FF7D05277DA8FD04277D5252A8FFFFFF7DFD06FF7D7DFD51FFA87D27%27277DFFFFFF7D27527DA827A852522727A8FF7D2752FF5227275252527D%52A8FFFFFFA8A8FD05FF52A8FD46FFA8A87D7DA8FD06FF52FD042705A8FF%FF2752A8FFFFA87D7D27A87DFFFF52FD072752FD047DFFFFFFA8FD06FF7D%A8FD45FFA852275227527DFD04FFA82727277D522752FFFF2E84FD05FF7D%27FFFFFFA82752272727522727527D527D7DFD04FFA8FD05FF7DA8FD44FF%7D2727A8A8FFA87DA8FFFFFF522752FFFFFFA852A8FF52FD06FFA8F87DFF%FF52FD062752F87DA8527D7DFFA8FD08FFA8A8FD44FF5227FD0AFF5252FD%05FFA8FFFFA8FD06FF7D272759522727522752275252277DA8527DA87D52%A8FD08FFA8FD43FFA827A8FD0AFF27A8FD0FFF7DFD0727522727525205A8%FF52A8A87D2752FD4CFFA852FD0BFFA8FD10FF272E272E275227527D2727%7D5227A8FF527DA8525227A8FD4BFFA852FD1BFF52FD0827A827277D2E27%FFFF7D7DA87DFFA87DFFFFFFA8A8FD46FFA87DFD1AFF7D272752272E2752%2752A82E277D2752FFFF7D7DA87DFFFF7DA8FF7D522752A8FD45FFA8FD19%FF7D272727527DFD042752A8F8527D2752FFFFA87D52A8FFFFA8FFFF5227%52277DFD5EFFA82E2752277DA827272705A87D277D5227A8FFFFFF52277D%FFFFFFA8FF2752275227A8FFFFA87D27527DFD51FF525252A8FF7DF82727%277DFFFD0427A859277DF827A8FFFFFF7D2752A8FD04FF7DA8FFA8527DFF%FFA8277DA87D7DFD4FFF522727272EFF2EFD0427FFA852272752FFFD0427%2EFD04FF7D522752A8FFFFFFA8FFFFFF7D7DFFFF527DFFFFFFA8A8FD04FF%A8525252A8FD3AFFA87D527DA8FD05FF52FD05277D522727F87DFFA80527%52FF7D272727F87DFD05FF5252277DFD08FF7DFFFF59A8FD08FFA827527D%7D52A8FD06FF7D7D7DFD25FFA8FD09FFA852FD0427A8FFFFFFA82727527D%A8527D2727277DFFFF7D2727FFA8FD05277DFD05FF52275227A8FD0AFF52%A8FD08FF5252A8FFFFFF7DA8FD04FF52272752277DFD07FFA87D7D7DA8FD%08FFA8A87D7DA8FD07FFA87D272727527DFD05FF7D272727F827F852AFFF%FF7DF87DFD04FFA8527DA8FFFFA8FD0A27FD06FF7DFD0452FD0AFFA8A8FD%08FF527DFD05FFA8FFFFFF52277DFFFFA852A8FD05FF7D27272E5227A8FD%06FF7D52272727527DFD06FF5227527DA87D52A8FD04FF52272752A87D7D%27FFFFFF5252FD06FF52A8FFFFFF7DFD06275252277DFD07FF27525252A8%FD09FFA8A8FD08FF52A8FD08FFA8277DFD05FF7DFD04FFA80552A8FFFFA8%52A8FD04FF7D2727A8A8FFA87D7DFD04FF7DF87DFD05FFA8FFFFFFA8F827%7DFD04FF7DA8FFFF527DFD06FF5227FFFF7DF8FD06277D27277DFD07FF7D%277D52A8A8A8FD08FFA8FD08FF7DA8FD08FFA827FD0BFF5252FD06FFA8FD%04FF522EFD0BFF277DFD0AFF7D277DFD09FF7DFD07FF52272752FD072752%7D2727FD08FF7D27527D7D52277DFD10FFA8A8FD08FFA859FD0AFFA8277D%FD0AFFA827A8FD0AFF7D27A8FD0AFF7D52FD12FF52052705272727525205%275952F87DFD09FF52527DA8525227A8FD1AFF7DFD0BFF52FD0BFFA852FD%0BFFA852FD0BFFA8A8FD11FFA82727272E272727A8522727A82727A8FD09%FF7D277D7D7D525227FFFFFFA87DA8FD14FFA8A8FD0AFF7DA8FD0AFFA852%FD0BFFA87DFD1DFFA8FD0827A852F87D522752FD0AFFA852A8A8A8FFA852%7DFFFF5227527DFD1FFFA8FD0CFFA8FD0CFFA8FD1BFFA8522727A852FD04%2752FF0552A827F8A8FD0BFF527D7DA8FFFF7D52A8FFFD042752FD05FFA8%FD4DFF7D27F8272EFF52272727F8FF7D278452F852FD0DFF275259FFFFFF%59A8FF52527D27277DFFFFFF7D52527DA8FD43FFA87D27527DFFFF522727%27A8FF7D2727F884FF27277D27277DFD0DFF7D2752A8FFFFA87DFFA8FFFF%FF5252FFFFA852272E27277DFD05FFA8A8A8FD31FFA8FD07FF7D27F82705%27FF7DF827F87DFFFF2727F859FF7DF827F82727FD0EFFA852277DFD0AFF%52A8FFFF27522752272EA8FFFFFF5252272752A8FD08FFA8FD23FF7D5227%2727A8FD04FFA8FD0627A85227277DFFFFA82727A8FF7DF8272727F8A8FD%0FFF5227277DFD09FFA87DFFA8527DFFA87D2752FFFF7DFD0627A8FD05FF%7D27272752A8FD07FF7D7D527D7DFD07FFA8592727277DFD06FF52270527%052727A8FFFFFF2EF827F82727277D2759A8FFFFFF52F827527DF8270527%F852FD11FF5252277DA8FD0BFFA8FD04FFA827FFFF7D2752527D272727FD%04FF7D27522752272784FD05FF52FD05277DFD05FF7DFD06277DFD04FF7D%FD07277DFFFFA8272727A8FFFFA85227FD04FF7DFD0427052E52272727A8%FD11FFA827522752275227527DFD0CFF7D7DFF7D52A8FFFFFF7D277DFFFF%FFFD072752A8FFFFFF52FD07277DFFFFFFA8FD0827A8FFFFA82705272752%5252F87DFFFF7DF82EFD04FFA8F827A8FFA852F82727270527527DF82752%FD13FF7D52522752272E27277DFD0FFFA8FD05FF7D7DFFFFA827277DA8A8%7D2DF8A8FFFFFF522727275227272752FFFFFF7D27272752522E27277DFF%FFA8272752FD04FFA8A8FFFF7D27FD05FFFD04272E2EFD0727A8272727FD%14FFA85252522752522727277DFFA8A87DA8FD10FFA8FFFFFF52FD05FFA8%2752FFFFFF27277DA8A8A8592727FFFFFF522752A8A8FFA87D27A8FFFF7D%277DFD09FFA8A8FFFFFFA82727F8270527F827F87D2727F87D5927F8A8FD%15FF7DFD0452A82752275252522727277DA8FD19FFA8A8FFFFFF7DA8FD05%FF7D7DFFFFFF7D52FD0BFF7DFD0EFFA8FD092752FF52F852A827F87DFD17%FF52527D7D7DA8FD0927527DA87D7D52527DFD23FFA8FD13FF7D7D7DA8A8%A87D52F827F852842E0527F827A8A8F852A82EF852FD19FF52A87D52FFFF%FD05522E2752FD0927A8FD04FFA87D527DA8FD29FFA87D2727F82705FD05%270527A8FF5227272752FF2752A859F827A8FD19FFA827272752FFFFFF84%27A87DFD0B2705527D7D52272727F82727A8A8FFFFFFA8A87D7D527D7DFD%07FFA8A85252277DA8FFFFFF7D7D525252A8A8FFA8A85227F8FD04277DF8%27F827F8277DFFFF52F82752FF52277D52F8277DFD1BFFA827522752FFFF%FF2752FF7D52277D52272752275227522727272E2752275227272752527D%5252FD072752FD047D522EFD072752FD092752FD0627F8A8FF522727F852%A8FFFFA8F8277DFF7D27272705277DFD1DFF7D275227527DA827277DFFFD%04A8272EA852FD042752FD0927F8FD0B27F827F827F8FD0F27F8527D27F8%2727270527F87DFFFF272727A8A8FFFFFF2727A8FF5205F827270552FD1F%FF7D27522727275227277DFD04FF5227A8FF7D272752FF52275252FD0527%7D272E2727272EFD042752FD0927F87D52FD09277DFF52FD0627A8FFFFA8%27F8A8FD04FF2E272752FD062752FD21FF52277DFD062752A8FFA8272727%A8FFFFA8FFFF7DF87DA8522727277DFF52F8272727F8FD0427FF52272727%F8270527F827A8FFFD0427F827F82E7DFFFF52F8277DA8A8FD04FF52F827%7DFFFFA82705F827F8F8527DF82727FD23FF59527D275227522727275227%52272727A8FD04FF7D2727FFFFFFA8FFFFFF522727A8A859275252FFFF7D%0527527D272E277DA8FFA8272752A8A87DA8FD04FF272705A8FD05FF52F8%2727275252FD062752FF272727FD25FF52527DFD0D277DA8A87D2E272727%FD06FF52052752FD07FF5227F852FFFFA8FD04FFA8F827F8A8FD06FFFD05%27FFFFFF7D2EF827F8270527F82727A805272EA8270527FD27FF52527D27%5252272752FD0B275227272784A8FFA87DFD042759FD05FFA8FD0427A8FD%05FFA8FD04272EFD04FFA8FD0727522727F8FD0827FFA80552FF52F827FD%29FF5252A87D7D52FD04275252FD0B27F8272727F8FD06277D7DA85227F8%272727F87D7DA87D7D27270527272705525227F8272727F8270527F82705%27F8278427F82727A8A8277DA827F827FD2BFF7D27A8277D7D52275227FF%A852FD09272E2727272E2727272E272705FD1B27F87D52FD07277DFF2727%52FFFF2E52A8272752FD2DFF7DF82727527D84A82752FFA87D527D27527D%27F82705FD1327F82727270527272705272727F8272727F827F852FFFF27%27F827F8277DFF52277DFFA827F827F80552FD2FFFA8272727527DA82727%52FD04FF7D27FFA87D27527D52272752272727F85252FD0727F852522727%27F8FD0427FFFF270527272752A8FFFFFF522727F852A8FF52277DFF5227%2727F8277DFD32FF52272727052727272EA8FFFF7D2752FD05FF7D2727A8%A87D2E52A8FF2727277D27272752A8FF27272752275252FFFFFF520527A8%A8FD04FF7DF8277DA8FFFF2705F827277D2727F852A8FD34FF7D2E272EFD%05277D7D52272752FD05FF272752FD06FF52F852FFFFA8FD04FF52272EFD%06FFA827F852FD05FF7D0527277D7D522752272752A87D27277DFD37FFA8%52F82727525227F82705FD04277D7DA82E27272752FD05FF2727F87DFD05%FFA8F82705A8FD04FFA852F827057DA8A87D52F827F827F8F8F8A8A8277D%A827F827A8FD3AFFA82727277D7D52272727522727F8FD08277D7D7DFD04%27057DA8FFA87DFD05277D7DA85227F8272727F8272727F8277D27F82752%FFFFA8A87DF8277DFD3EFF5227F8527DA852275259F827F8272727F82727%27F827F82705272727F8272727F8270527F827F827F827F827F8522727F8%27F827A8FF2752A8FF7D525227F852A8FD40FFA87D052752FFA82E7DA852%2EFD0452052705FD0F27F85252FD0527F87DFF270527277DFFFF2752FFA8%5227F82752A8FD44FFA85227F827052752A8A8FF52277D7D52527D52F852%2727F8277D52F827F827F827A8A8F827272752A8FF7DF852A8FFA87D0527%272EF805F85284FD48FFA87D2727F8275252FD04277DA8FFFF2E2752A8A8%A8FFFF272752A87DA8FFFF27272EFFAFFFA852F827277D2E7D52272727F8%2752A8FD4DFF7D52F8527D7DFD0427F8272727F82727527D7D2727F82752%A87D7D2727F827275227F80552F82752847D52F827277DA8FD52FF7D5252%7D7DA87D7D522E27522727F827F827F8270527F827F8270559522727527D%A87D7DA87D2727277DA8FD57FFA8527D2727277D7D2E27FD047D27277D52%7D7D27277D7DA8842E27A87D7D27052727277DA8FD5EFFA87D52522727F8%525252F827527D52522727527D2727F8FD0427597DA8A8FD64FFA8FFA8A8%7D7D5252FD05272E27522752527D7DA8A8FD34FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--1 Bn%AI5_BeginGradient: (Unnamed gradient 154)(Unnamed gradient 154) 0 2 Bd[<89898A8B8C8D8E8F909191929394949596969799999A9B9C9C9D9E9E9F9FA0A1A2A2A3A3A4A5A5A6A7A7A8A8A9A9ABABACACADADAEAEAFAFB0B0B1B2B3B3B4B4B4B5B5><737475767777777878797A7B7B7C7D7E7F7F80808081828283848586868788888889898A8B8B8C8D8D8E8F8F909090919192939394949595969697969797989899999A><72737475757677777879797A7B7C7C7D7E7F7F808081828283848585868687878788898A8A8B8C8D8D8E8F8F9090909191929293939494959596979797989899999A9A><191A1B1C1D1E1F202123242527282A2B2C2E2F2F3132343536383A3B3D3E404242434547494A4C4E505153555758595A5C5E60626466686A6C6E7070727476797B7D7F><7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938><7A79787776757574737271706F6E6D6C6B6A69696867666564636261605F5E5D5D5C5B5A59585756555453525150504F4E4D4C4B4A49484746454444434241403F3E3D><7A79787776757574737271706F6E6D6C6B6A69696867666564636261605F5E5D5D5C5B5A59585756555453525150504F4E4D4C4B4A49484746454444434241403F3E3D>4 %_Br[0.709804 0.603922 0.603922 0.498039 0.219608 0.239216 0.239216 2 50.1766 100 %_BS%_0.709804 0.603922 0.603922 0.498039 0.219608 0.239216 0.239216 2 50.1766 100 Bs0.537255 0.45098 0.447059 0.098039 0.478431 0.478431 0.478431 2 50.1766 0 %_BS%_0.537255 0.45098 0.447059 0.098039 0.478431 0.478431 0.478431 2 50.1766 0 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp4 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 6 Bd[<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br[0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F2021222324252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F5152535455565658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F90909192939494959696979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAABABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2><00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C1D1D1E1F202122222324262728292A2B2C2D2E2E2F30313233343536373838393A3B3C3D3E3F4041434445464648494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC><00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F8081818283838485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423222120>4 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 6 Bd[0<FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDEDDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AEAEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E>101<000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F20212223242425262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F70707071717272727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F>04 %_Br0<9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444>101<7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF>04 %_Br<0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F303132343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282><444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18181515141212100F0F0C0C0B0909060606040402020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>10<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473><BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECFCFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDEDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8><00000000000101010101010101010102020202020202020203030303030303030304040404040404040404050505050505050505050606060606060606060707070707070707070708080808080808080808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F>4 %_Br<8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E101012121313161618181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C59575553514E4D4A484644413F3C3A373633312E2C29282523>0<737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F0F0E0E0D0C0C0B0B0A09090807070606050404030302010100><F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBEBEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACACABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0><0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F404141424344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F60616263636465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6>4 %_Br<C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADADADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDCDBDBDBDBDBDBDADBDBDADBDADADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6><3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E70727476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCFCFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7><232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F10101111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F20202021212222232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F303031313232323333343435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242><A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110><C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2>4 %_Br[0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.03125 29.4307 L3.03125 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.89063 50.123 L5.89063 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.89063 50.123 m25.0264 50.123 L25.0264 32.4961 L5.89063 32.4961 L5.89063 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.30566 48.793 L8.30566 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 Xa 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.67578 L28.9355 1.67578 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.95703 L47.6777 4.95703 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.95703 L30.0527 4.95703 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.50293 L47.4199 6.50293 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.75293 26.1445 L2.75293 2.16992 L25.4316 2.16992 L25.4316 26.1445 Lf*U*u4.95605 7.40039 m22.582 7.40039 L22.582 25.0273 L4.95605 25.0273 L4.95605 7.40039 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.67383 m4.95605 5.67383 L4.95605 25.0273 L22.582 25.0273 L22.582 5.67383 Lf20.3887 21.3281 m7.58105 21.3281 L7.58105 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.93555 8.73633 m21.0371 8.73633 L21.0371 22.8379 L6.93555 22.8379 L6.93555 8.73633 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.623529 0 0.003922 0 0.2 0.776471 0.956863 Xa 0.623529 0 0.003922 0 0.2 0.776471 0.956863 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa 0.043137 0 0.713725 0 1 1 0.4 XA) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.901961 0 0 1 0.2 0.6 Xa 0 0.901961 0 0 1 0.2 0.6 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7769.8833 8488.2305 m-7678.0479 8488.2305 L-7678.0479 8483.9512 L-7769.8833 8483.9512 L-7769.8833 8488.2305 Ln0 O0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa-7769.6631 8485.5508 m-7770 8485.6172 -7769.4814 8485.8066 -7769.8833 8485.6641 C-7769.8379 8485.5459 -7769.7725 8485.457 -7769.6631 8485.5508 Cf-7679.1675 8485.7168 m-7680.2529 8486.4795 -7681.6816 8485.709 -7682.8701 8486.1953 C-7683.0098 8486.2275 -7682.8354 8485.7773 -7683.1484 8485.8779 C-7684.3008 8486.4707 -7686.1162 8486.1172 -7687.5195 8485.6602 C-7687.4346 8485.542 L-7687.7021 8485.457 -7688.0283 8485.8477 -7688.3115 8485.793 C-7688.3135 8485.7148 -7688.2207 8485.6816 -7688.2861 8485.5732 C-7688.3574 8485.8105 -7688.7979 8485.6836 -7688.9189 8485.8594 C-7689.0303 8485.7676 -7689.0195 8485.5801 -7689.1641 8485.4756 C-7689.3262 8485.7451 L-7689.7769 8486.3848 -7690.4209 8485.7012 -7691.0361 8486.0313 C-7691.0063 8485.9688 -7690.9453 8485.9199 -7690.9941 8485.8594 C-7691.9814 8486.248 -7693.2168 8486.1748 -7694.3208 8486.3184 C-7694.2769 8486.2236 -7694.2363 8486.0508 -7694.3008 8485.9434 C-7694.3555 8486.2266 -7694.6963 8486.2979 -7694.9922 8486.3535 C-7695.1255 8486.0625 -7695.4995 8486.6191 -7695.8467 8486.458 C-7695.8169 8486.3945 L-7696.0732 8486.6992 -7696.1973 8486.2188 -7696.4053 8486.584 C-7696.5684 8486.3555 L-7696.6807 8486.7656 -7696.9395 8486.1426 -7697.1514 8486.3516 C-7697.1445 8486.4355 L-7697.3442 8486.5352 -7697.4482 8486.3291 -7697.6338 8486.3984 C-7697.6514 8486.3516 L-7698.0854 8486.458 -7698.3379 8486.2305 -7698.3271 8486.5508 C-7698.4795 8486.2939 -7697.9063 8486.4336 -7698.1455 8486.0596 C-7699.5732 8486.3906 -7701.0459 8486.3252 -7702.4834 8486.332 C-7702.6465 8486.2031 -7702.7505 8486.1641 -7702.7871 8486.042 C-7702.9307 8486.1074 -7703.3281 8486.1016 -7703.4585 8486.2656 C-7703.4102 8486.2588 -7703.5513 8486.1016 -7703.6274 8486.0859 C-7703.8887 8485.9648 -7703.9131 8486.4375 -7704.2002 8486.2939 C-7704.0859 8486.209 -7704.0469 8486.1055 -7704.0854 8485.9863 C-7704.3301 8486.2363 -7704.6577 8486.1963 -7704.9473 8486.2773 C-7704.9023 8486.2236 -7704.8325 8486.1914 -7704.8433 8486.0908 C-7705.1602 8486.374 -7705.4209 8486.0313 -7705.6982 8486.21 C-7705.5947 8486.0254 L-7706.0415 8485.8008 -7705.7266 8486.4121 -7706.1128 8486.2793 C-7706.02 8486.2207 -7706.0527 8486.1484 -7706.0361 8486.0732 C-7706.3965 8486.4092 -7706.9795 8486.2979 -7707.3389 8486.4121 C-7707.3174 8486.3867 -7707.3232 8486.3359 Y-7707.7148 8486.3779 -7708.1245 8486.2734 -7708.5552 8486.4199 C-7708.7119 8486.3379 -7708.5039 8485.9688 -7708.9185 8486.0371 C-7708.9033 8486.4082 -7709.6221 8486.1895 -7709.3779 8486.6094 C-7709.7319 8486.5488 -7710.2925 8486.4092 -7710.5283 8486.5352 C-7710.3691 8486.3945 -7710.7007 8486.082 -7710.4063 8486.0508 C-7710.6289 8485.8252 L-7710.5957 8485.6738 -7710.3999 8485.877 -7710.4707 8485.6855 C-7710.6182 8485.7012 -7711.0479 8485.8477 -7711.1797 8485.7871 C-7711.4531 8486.0146 -7711.7041 8486.4395 -7712.1465 8486.4863 C-7711.9385 8486.3418 -7712.2646 8486.0771 -7712.1235 8486.0137 C-7712.7407 8486.7236 L-7712.8877 8486.7412 -7712.7725 8486.4316 -7712.9854 8486.5283 C-7712.9746 8486.626 -7713.0674 8486.6875 -7713.1318 8486.7676 C-7713.1875 8486.7236 -7713.7441 8486.8594 -7713.8081 8486.4932 C-7713.8735 8486.3516 -7713.5684 8486.418 -7713.7314 8486.2871 C-7714.0029 8486.29 -7714.0151 8486.416 -7714.2871 8486.4219 C-7714.2925 8486.373 L-7714.4717 8486.3184 -7714.8213 8486.5283 -7714.6265 8486.7305 C-7714.5015 8486.7412 -7714.6738 8486.5107 -7714.4888 8486.6172 C-7714.6152 8486.8291 -7714.9312 8486.8887 -7715.2031 8486.8916 C-7715.1104 8486.834 -7715.1216 8486.7363 -7715.0845 8486.6328 C-7715.4497 8486.9199 -7715.8369 8487.0107 -7716.2451 8487.1309 C-7716.2515 8487.3047 -7716.0928 8486.8145 -7716.0327 8486.9063 C-7716.5557 8486.665 -7717.1128 8487.248 -7717.5479 8486.8955 C-7717.4766 8486.8652 -7717.5098 8487.1426 -7717.5146 8487.0938 C-7717.7666 8487.0723 -7717.7549 8486.8203 -7717.9189 8486.9131 C-7717.9355 8486.7656 -7718.1255 8486.9609 -7718.2944 8487.0059 C-7718.3818 8487.1123 -7718.3384 8486.9336 -7718.1914 8486.918 C-7718.4268 8487.042 -7719.3691 8487.2695 -7719.9131 8487.0547 C-7719.9023 8487.1523 -7720.2471 8487.4131 -7720.3721 8487.4023 C-7720.3232 8487.1738 L-7720.4375 8487.0371 -7720.7422 8487.1934 -7720.7632 8486.998 C-7721.0303 8487.2754 -7719.7344 8486.7617 -7720.0957 8486.9756 C-7720.1895 8486.7852 -7720.5991 8487.3398 -7720.5215 8487.0283 C-7720.7725 8487.0371 -7721.0161 8487.2939 -7721.2559 8487.0801 C-7721.1865 8487.1172 -7721.0522 8486.7627 -7721.2549 8486.7793 C-7721.6123 8486.8203 -7721.3564 8486.8887 -7721.6465 8486.9648 C-7721.8281 8487.0586 L-7721.8398 8487.2813 -7722.1475 8487.0283 -7722.0146 8487.2773 C-7722.0586 8487.0938 -7722.5337 8487.3906 -7722.4971 8487.0215 C-7722.4473 8486.7305 L-7722.6016 8486.752 -7722.7002 8487.0371 -7722.8213 8487.165 C-7722.8418 8487.1387 -7722.8823 8487.0801 -7722.8745 8487.0332 C-7722.8994 8487.4785 -7723.2432 8486.9961 -7723.4268 8487.3398 C-7723.7505 8487.1855 -7724.2495 8487.3252 -7724.4023 8487.0488 C-7724.6514 8487.1836 -7724.8784 8487.3428 -7725.1621 8487.248 C-7725.1055 8487.2061 -7725.0283 8487.1934 -7725.0122 8487.0977 C-7725.1904 8486.9668 -7725.2344 8487.084 -7725.3975 8487.1563 C-7725.3608 8487.0898 -7725.7539 8486.8955 -7725.9521 8486.7383 C-7726.1992 8486.8711 -7726.1143 8487.1113 -7726.1392 8487.2578 C-7726.3652 8486.8184 -7726.8379 8487.541 -7727.1211 8487.1426 C-7727.0352 8487.082 -7726.7598 8486.9268 -7726.9658 8486.8164 C-7727.1919 8486.3779 -7727.4219 8487.1396 -7727.7861 8486.9297 C-7727.6968 8487.2939 L-7727.8594 8487.0684 -7728.2334 8487.5059 -7728.1963 8487.1348 C-7728.3184 8487.2656 -7728.6265 8487.0137 -7728.5859 8487.3691 C-7729.1846 8487.0684 -7730.0425 8487.5508 -7730.4102 8486.9131 C-7730.4961 8486.9727 -7730.7104 8486.9121 -7730.6665 8487.0947 C-7730.5239 8487.293 -7730.4673 8486.9531 -7730.4141 8487.0879 C-7730.4912 8487.0986 -7730.5078 8487.1963 -7730.5161 8487.2451 C-7730.7021 8487.1641 -7730.8486 8487.1387 -7730.6729 8486.8428 C-7731.0869 8486.623 -7731.1001 8487.4473 -7731.6274 8487.3076 C-7731.6035 8487.1611 -7731.6436 8487.1055 -7731.7979 8487.1289 C-7732.0903 8487.3809 L-7732.4312 8487.3223 -7732.2842 8487.0459 -7732.2925 8486.7969 C-7732.4746 8486.8398 -7732.6973 8486.8281 -7732.7803 8487.0137 C-7733.0015 8486.7012 L-7732.8398 8486.9268 -7733.1514 8486.8516 -7733.2368 8486.9121 C-7733.1514 8486.8516 L-7733.1846 8486.7451 -7733.3955 8486.8105 -7733.5024 8486.8418 C-7733.4766 8486.9961 -7733.2617 8487.0586 -7733.1445 8487.1035 C-7733.2373 8487.2129 -7733.3823 8487.1875 -7733.5059 8487.3164 C-7733.4648 8487.0723 -7733.8027 8487.1426 -7733.9473 8487.1172 C-7734.1133 8487.0645 -7734.1348 8487.3359 -7734.1831 8487.3281 C-7734.1875 8487.2012 -7734.4541 8487.3066 -7734.3247 8487.1289 C-7734.2681 8487.0879 -7734.1953 8487.252 -7734.1016 8487.1396 C-7734.2109 8487.0459 -7734.1982 8486.8252 -7734.4258 8486.9863 C-7734.5967 8487.1074 -7734.3818 8487.4688 -7734.7061 8487.3145 C-7734.6211 8487.2539 -7734.6055 8487.1563 -7734.5391 8487.0684 C-7734.8433 8486.9414 L-7734.8564 8487.1641 L-7734.8975 8487.1074 -7734.8691 8487.0879 -7734.8877 8487.0586 C-7734.9785 8487.293 -7735.3521 8487.1309 -7735.4209 8487.3945 C-7735.5742 8487.418 -7735.7441 8487.2402 -7735.8906 8487.2148 C-7735.8623 8487.1953 L-7736.0415 8487.0645 -7736.2793 8487.1504 -7736.4297 8487.3008 C-7736.4219 8487.252 L-7736.5195 8487.2344 -7736.7505 8487.2695 -7736.8735 8487.4004 C-7737.1201 8487.2324 -7736.9561 8486.5596 -7737.2295 8486.8398 C-7737.48 8486.8477 -7737.6221 8487.248 -7737.5215 8487.3906 C-7737.9717 8487.2402 -7738.4834 8487.6035 -7738.9009 8487.2578 C-7738.9658 8487.3477 -7738.9248 8487.4043 -7739.0586 8487.457 C-7739.7197 8487.3691 -7740.4551 8487.7207 -7740.9814 8487.2832 C-7740.79 8487.1895 -7740.9688 8487.0596 -7740.9727 8486.9336 C-7741.1309 8487.1328 -7741.1631 8486.7266 -7741.2197 8487.0684 C-7741.2041 8487.2695 -7741.2197 8487.3672 -7741.0337 8487.4482 C-7741.4282 8487.5566 -7742.0283 8487.5566 -7742.2471 8487.3691 C-7742.1377 8487.4619 -7742.2227 8487.5234 -7742.3086 8487.584 C-7742.2803 8487.2627 -7742.5713 8487.2148 -7742.7915 8487.3281 C-7742.8223 8487.5234 L-7742.9658 8487.3223 L-7743.0503 8487.3848 -7743.0591 8487.7324 -7743.2773 8487.5449 C-7743.2891 8487.4688 -7743.3018 8487.3916 -7743.3418 8487.3359 C-7743.5693 8487.4961 -7743.8906 8487.7676 -7744.1377 8487.6016 C-7744.3398 8487.3164 L-7744.4453 8487.3477 -7744.6235 8487.5195 -7744.4375 8487.6016 C-7744.8594 8487.4297 -7745.1309 8487.4082 -7745.2646 8487.1611 C-7745.9912 8487.7627 -7747.0459 8487.7871 -7747.8906 8487.7441 C-7747.8652 8487.5977 L-7748.0923 8487.4609 -7747.9834 8487.8535 -7748.1416 8487.752 C-7748.0684 8487.6123 -7748.3145 8487.4482 -7748.1362 8487.2773 C-7748.4609 8487.123 -7748.5547 8487.5313 -7748.7656 8487.5977 C-7748.7979 8487.79 -7748.5957 8487.4746 -7748.6367 8487.7188 C-7748.6729 8487.7871 -7749.0859 8487.5684 -7749.1362 8487.8594 C-7749.2178 8487.7451 -7749.1543 8487.5313 -7749.1104 8487.4131 C-7749.3086 8487.5547 L-7749.5513 8487.2148 -7748.7559 8486.9473 -7749.0107 8486.5283 C-7749.1934 8486.5732 L-7749.3682 8486.2695 -7748.71 8486.2305 -7749.1689 8486.126 C-7749.3682 8486.2695 -7749.5381 8486.6914 -7749.3608 8486.8203 C-7749.7754 8486.9004 -7749.5527 8487.5137 -7749.9985 8487.4893 C-7750.1201 8487.3184 -7749.6416 8487.4482 -7749.7275 8487.209 C-7749.9375 8486.9746 -7750.1484 8487.3398 -7750.3354 8487.2578 C-7750.1279 8487.3672 -7750.3032 8487.6611 -7750.4375 8487.7148 C-7750.6641 8487.5771 -7750.29 8487.4395 -7750.6113 8487.4092 C-7750.6641 8487.5771 -7750.9595 8487.7031 -7750.7041 8487.8203 C-7750.8203 8488.2012 -7751.0381 8487.7148 -7751.2129 8488.0098 C-7751.3174 8487.7412 -7750.8823 8487.3906 -7751.2354 8487.2568 C-7751.1792 8487.5146 -7751.6704 8487.6074 -7751.4839 8487.9893 C-7751.6221 8487.916 -7751.6367 8487.7129 -7751.5361 8487.5547 C-7751.7334 8487.3955 -7752.0151 8488.0254 -7752.0801 8487.5137 C-7752.1479 8487.7773 L-7752.21 8487.6914 -7752.2983 8487.626 -7752.3994 8487.4844 C-7752.5732 8487.4795 -7752.96 8487.8418 -7752.9443 8487.4434 C-7753 8487.4844 -7753.3975 8487.4668 -7753.2441 8487.7412 C-7752.9971 8487.9092 -7752.96 8487.541 -7752.8223 8487.9131 C-7752.9971 8487.6094 -7753.1787 8487.9531 -7753.3213 8488.0547 C-7753.3447 8487.9004 L-7753.4297 8487.9609 -7753.6255 8487.9268 -7753.6787 8488.0938 C-7753.6133 8488.0059 -7753.6475 8487.9004 -7753.7148 8487.8633 C-7753.8042 8488.0977 L-7754.1494 8488.2148 -7753.8857 8487.6855 -7754.2217 8487.7539 C-7753.9663 8487.5723 L-7754.0225 8487.6113 -7754.1367 8487.3916 -7754.2979 8487.4648 C-7754.3604 8487.6787 -7754.4775 8487.9355 -7754.5313 8488.1016 C-7754.7207 8488.1953 -7754.6162 8487.8604 -7754.8027 8488.0801 C-7754.5586 8487.8223 L-7754.5215 8487.752 -7754.7231 8487.4688 -7754.9761 8487.4746 C-7755.1377 8487.5488 -7755.3887 8487.8574 -7755.1338 8487.9746 C-7755.2607 8487.9785 -7755.4385 8487.8477 -7755.3379 8487.6914 C-7755.6255 8487.7656 -7755.2998 8487.9219 -7755.5479 8488.0547 C-7755.6494 8487.9121 -7755.9658 8487.709 -7756.1563 8487.502 C-7755.8975 8487.1436 L-7756.0693 8487.1396 L-7755.8467 8486.8535 -7756.1826 8486.9219 -7756.0566 8486.6191 C-7756.1743 8486.5723 -7756.3169 8486.6748 -7756.4307 8486.7539 C-7756.0864 8487.2383 -7756.8159 8487.416 -7756.7158 8487.8574 C-7757.1875 8487.9785 -7757.0107 8486.7832 -7757.5024 8487.4746 C-7757.4219 8487.5898 -7757.6533 8487.9258 -7757.3564 8487.7979 C-7757.6494 8487.75 -7757.5557 8488.2412 -7757.9014 8488.0586 C-7757.6455 8487.877 -7758.1763 8487.6113 -7757.8066 8487.3477 C-7757.8311 8487.4932 -7757.6001 8487.458 -7757.5435 8487.418 C-7757.6641 8487.248 -7757.5186 8486.9727 -7757.8184 8486.9727 C-7758.0015 8487.0146 -7758.2524 8487.0234 -7758.2158 8487.2539 C-7758.2085 8487.5068 -7757.9365 8487.2266 -7758.0537 8487.4824 C-7758.4185 8487.5703 -7758.4795 8487.1855 -7758.6304 8487.6348 C-7758.3999 8487.5986 -7758.3423 8487.8594 -7758.3467 8488.0332 C-7758.6143 8488.1387 L-7758.5625 8487.9707 L-7758.9922 8487.8496 -7758.6895 8488.2754 -7759.1055 8488.2305 C-7759.3008 8487.8984 L-7759.2017 8487.6123 -7758.6953 8488.0254 -7758.7695 8487.5596 C-7759.04 8487.541 -7759.1299 8487.7773 -7759.3848 8487.6572 C-7759.3281 8487.6172 -7759.2505 8487.6055 -7759.1943 8487.5645 C-7759.2915 8487.5488 -7759.3877 8486.9316 -7759.7734 8487.293 C-7759.9727 8487.4336 -7759.8262 8487.458 -7759.8311 8487.6328 C-7760.2656 8487.6855 -7760.3955 8487.8633 -7760.6753 8487.8906 C-7760.6177 8487.5508 -7761.1699 8487.8574 -7760.8608 8487.5098 C-7760.7188 8487.709 -7760.0903 8487.6895 -7759.9365 8487.3652 C-7760.0947 8486.9619 -7759.5952 8487.4219 -7759.5024 8487.0137 C-7759.8506 8487.0039 -7759.8335 8486.6074 -7759.8896 8486.3477 C-7759.9863 8486.3291 -7760.0801 8486.4395 -7760.1377 8486.4795 C-7760.1787 8486.7236 -7760.0522 8486.7207 -7760.0449 8486.9727 C-7760.4336 8486.9063 -7760.8081 8487.042 -7761.0225 8487.2813 C-7761.1523 8487.1602 -7761.1113 8486.916 -7760.9575 8486.8916 C-7761.4199 8486.9648 -7761.9141 8486.9316 -7762.3535 8486.8574 C-7762.0693 8487.2568 -7762.8433 8486.9512 -7762.6494 8487.2832 C-7762.4141 8487.373 -7762.2119 8487.6572 -7762.3418 8487.8359 C-7762.4888 8487.8105 -7762.3369 8487.6611 -7762.3984 8487.5762 C-7762.5859 8487.7939 -7762.6895 8487.2266 -7762.8735 8487.5703 C-7762.4512 8487.4414 -7762.7915 8487.084 -7762.7139 8486.7715 C-7763.0186 8486.9473 -7762.7007 8486.5488 -7763.0024 8486.5488 C-7763.3057 8486.7227 -7763.6787 8486.8594 -7764.0161 8486.9268 C-7764.4399 8486.6309 -7765.0898 8486.9219 -7765.4683 8486.9336 C-7765.6665 8486.7754 -7765.5322 8486.4219 -7765.7471 8486.3604 C-7765.9995 8486.3672 -7765.5601 8486.7412 -7765.9336 8486.5801 C-7765.8975 8486.5098 L-7766.0107 8486.5908 -7766.5825 8486.2695 -7766.6929 8486.7773 C-7766.5776 8486.3945 L-7766.6475 8486.3594 -7766.7119 8486.4473 -7766.7695 8486.4883 C-7766.7725 8486.3633 -7766.8535 8486.25 -7766.7402 8486.168 C-7766.9707 8485.9043 -7767.2241 8486.21 -7767.4746 8486.2207 C-7767.3135 8486.4473 L-7767.7422 8486.625 -7768.0293 8486.4004 -7768.4443 8486.4795 C-7768.4316 8486.2578 L-7768.6787 8486.3906 L-7768.6182 8486.1748 -7768.8447 8486.0371 -7768.9751 8486.2168 C-7768.3335 8485.6738 L-7768.1553 8485.8047 -7768.5283 8485.9414 -7768.4165 8486.1602 C-7768.3213 8486.3516 -7767.9375 8486.29 -7767.8755 8486.0771 C-7768.0225 8486.0527 -7768.0293 8486.1016 -7768.1436 8486.1816 C-7768.1919 8485.873 -7767.9688 8485.8848 -7767.8584 8485.6787 C-7767.9355 8485.6914 -7768.0449 8485.5977 -7768.0615 8485.6953 C-7767.9102 8485.5449 -7767.7578 8485.5215 -7767.5059 8485.5137 C-7767.6763 8485.6348 -7767.4131 8485.7051 -7767.4775 8485.793 C-7767.4575 8485.5215 -7767.2168 8485.4375 -7766.9053 8485.5137 C-7766.6831 8485.8281 -7766.3208 8485.3115 -7765.96 8485.3984 C-7766.1064 8485.6738 -7766.2935 8485.8945 -7766.5127 8486.0059 C-7766.2861 8486.1436 -7766.2607 8485.998 -7766.0337 8486.1367 C-7765.9238 8485.9316 -7765.8457 8485.6172 -7765.5503 8485.4922 C-7765.5342 8485.6953 L-7765.2666 8485.5908 -7765.2666 8485.29 -7764.9258 8485.3477 C-7764.3418 8485.4473 -7763.7407 8485.4473 -7763.2949 8485.4727 C-7763.2783 8485.6748 L-7763.0303 8485.2412 -7762.4521 8485.5146 -7762.1182 8485.3223 C-7761.5503 8485.5176 -7760.8848 8485.1289 -7760.5938 8485.4785 C-7759.5913 8485.3223 -7758.7148 8485.1699 -7757.6768 8485.2441 C-7757.8516 8485.5391 L-7757.6655 8485.3223 -7757.7305 8485.709 -7757.5479 8485.665 C-7757.7578 8485.4297 -7757.2949 8485.3594 -7757.1665 8485.1787 C-7756.7041 8485.4082 -7756.1104 8485.1572 -7755.7007 8484.9512 C-7755.6846 8485.1543 L-7755.2705 8484.7734 -7754.7759 8485.1074 -7754.2598 8485.1699 C-7754.2007 8485.2539 -7754.1074 8485.4443 -7753.9536 8485.4219 C-7753.6738 8485.0938 -7753.5273 8485.1172 -7753.1167 8484.9121 C-7752.8169 8484.9121 -7752.3301 8484.9932 -7752.0254 8485.1211 C-7750.8975 8484.6602 -7749.7456 8484.9551 -7748.5732 8484.6777 C-7748.4888 8484.916 L-7747.3521 8484.4063 -7745.9541 8484.8691 -7744.9839 8484.6074 C-7745.0776 8485.0146 L-7744.7734 8485.1396 -7744.3843 8484.9082 -7744.4619 8484.6191 C-7744.1567 8484.7441 -7743.7007 8484.4219 -7743.5068 8484.7568 C-7743.1953 8484.832 -7743.1255 8484.5684 -7742.8662 8484.5137 C-7742.2422 8484.668 -7742.0107 8484.6328 -7741.4224 8484.5566 C-7741.5684 8484.5313 L-7741.6328 8484.6211 -7741.6387 8484.7939 -7741.4922 8484.8203 C-7741.2725 8484.7061 -7740.6846 8484.9297 -7740.9033 8484.4434 C-7740.2754 8484.7236 -7739.4385 8484.2148 -7738.8271 8484.5938 C-7738.8789 8484.4609 -7738.7246 8484.4355 -7738.6602 8484.3457 C-7738.1089 8484.3398 -7737.5293 8484.6113 -7737.0898 8484.3848 C-7737.0024 8484.4512 -7737.2295 8484.6113 -7737.0049 8484.625 C-7736.8721 8484.5732 -7737.0024 8484.4512 -7736.8384 8484.377 C-7735.9453 8484.1289 -7735.0303 8484.6328 -7734.2188 8484.5684 C-7732.7754 8484.3115 -7731.2695 8484.4414 -7729.8867 8484.3984 C-7729.9023 8484.4961 L-7729.4395 8484.123 -7728.8159 8484.8779 -7728.4463 8484.3164 C-7728.3369 8484.4092 -7728.0283 8484.3604 -7728.1094 8484.5488 C-7727.7407 8484.2852 -7727.0771 8484.7969 -7726.5439 8484.4619 C-7726.5928 8484.4531 -7726.6211 8484.4727 -7726.6777 8484.5146 C-7726.1392 8484.7305 -7725.6641 8484.4355 -7725.0957 8484.6309 C-7725.1533 8484.6729 -7725.2583 8484.7031 -7725.2754 8484.8008 C-7725.0557 8484.9883 -7724.7549 8484.3887 -7724.6348 8484.8594 C-7724.5088 8484.8555 -7724.5449 8484.623 -7724.6221 8484.6367 C-7723.3779 8484.8203 -7722.0498 8484.5195 -7720.7549 8484.4121 C-7719.8271 8484.6934 -7720.6982 8485.2051 -7719.9663 8484.8535 C-7719.9063 8484.9443 -7719.9229 8484.6738 -7719.9131 8484.7715 C-7719.6299 8484.6396 -7719.4717 8485.2969 -7719.2754 8485.0508 C-7719.3564 8484.7617 -7719.1445 8484.8887 -7719.1387 8484.7129 C-7718.5713 8484.9004 -7718.4575 8485.1611 -7718.0098 8484.9414 C-7718.0435 8485.0938 L-7717.5186 8484.6641 -7716.9102 8484.8945 -7716.4673 8484.3984 C-7713.5728 8484.3076 -7710.7983 8484.0332 -7707.9761 8483.9756 C-7705.1865 8484.0703 -7702.4551 8483.8477 -7699.6221 8484.1113 C-7698.9585 8484.5107 -7698.9087 8484.5 -7698.1797 8484.3379 C-7698.2095 8484.4023 -7698.2549 8484.418 -7698.2061 8484.4785 C-7698.1699 8484.1504 -7697.6929 8484.4473 -7697.6235 8484.1348 C-7696.5762 8484.1953 -7695.6113 8484.1055 -7694.5337 8484.1035 C-7694.7041 8484.1387 -7694.7896 8484.4063 -7694.5869 8484.3848 C-7694.3755 8484.1748 L-7694.3408 8484.2676 L-7694.2021 8484.2188 -7694.0513 8484.0566 -7694.1943 8483.9512 C-7691.4873 8483.668 -7688.8242 8484.3252 -7686.1729 8484.2451 C-7685.5439 8484.3818 -7684.6475 8484.2568 -7683.9629 8484.1895 C-7681.9355 8484.626 -7680.1084 8484.9795 -7678.0479 8484.6738 C-7678.3174 8485.5215 -7679.1675 8485.7168 Vf-7769.2578 8485.5176 m-7769.1855 8485.6816 -7768.9497 8485.7715 -7769.1377 8485.9893 C-7769.1611 8485.8359 -7769.2822 8485.6641 -7769.2578 8485.5176 Cf-7762.9619 8487.2051 m-7762.9536 8487.1563 -7762.8721 8487.2715 -7762.8521 8487.2979 C-7762.9297 8487.3105 -7763.0024 8487.4482 -7763.0645 8487.3633 C-7762.9854 8487.3516 -7762.9976 8487.2734 -7762.9619 8487.2051 Cf-7761.3521 8487.3027 m-7761.3765 8487.4482 -7761.7207 8487.5645 -7761.9238 8487.582 C-7761.3521 8487.3027 Lf-7759.8521 8487.9043 m-7759.7227 8488.0273 -7759.7583 8488.0947 -7759.9326 8488.0908 C-7759.9453 8488.0137 -7759.8877 8487.9746 -7759.8521 8487.9043 Cf-7759.7456 8487.5723 m-7759.6211 8487.5684 -7759.5591 8487.6543 -7759.4985 8487.7383 C-7759.5029 8487.6123 -7759.7871 8487.8164 -7759.7456 8487.5723 Cf-7756.4893 8487.9961 m-7756.4111 8487.9844 -7756.2417 8487.8633 -7756.1689 8488.0254 C-7756.2505 8487.9121 -7756.5498 8488.21 -7756.4893 8487.9961 Cf-7754.9761 8487.7754 m-7754.9272 8487.7852 -7754.9072 8487.8115 -7754.8506 8487.7715 C-7754.7607 8487.8379 -7754.8555 8487.9443 -7754.9312 8487.958 C-7754.9761 8487.7754 Lf-7727.4287 8487.1895 m-7727.5923 8487.2617 L-7727.5684 8487.1172 L-7727.4287 8487.1895 Lf-7715.3574 8487.1816 m-7715.1943 8487.0898 -7715.2441 8487.3184 -7715.2168 8487.3398 C-7715.3643 8487.3555 -7715.1621 8487.1602 -7715.3574 8487.1816 Cf-7708.8486 8486.4531 m-7708.8984 8486.457 L-7708.8818 8486.1572 L-7708.8486 8486.4531 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -(ush Tool/ Charcoal/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -(1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 1 1 1 Xa(White)Pc0.74902 0.678431 0.670588 0.901961 0 0 0 Xa(Black)Pc0 0.992157 1 0 1 0 0 Xa(RGB Red)Pc0.062745 0 0.964706 0 1 1 0 Xa(RGB Yellow)Pc0.627451 0 1 0 0 1 0 Xa(RGB Green)Pc0.517647 0 0.12549 0 0 1 1 Xa(RGB Cyan)Pc0.882353 0.768627 0 0 0 0 1 Xa(RGB Blue)Pc0.270588 0.815686 0 0 1 0 1 Xa(RGB Magenta)Pc0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.796078 0.968627 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.34902 0.870588 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.047059 0 0.933333 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.862745 0.176471 1 0.039216 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.901961 0.333333 0.988235 0.258824 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.760784 0 0.74902 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.87451 0.52549 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc1 1 0.262745 0.247059 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.34902 1 0.372549 0.109804 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.117647 1 0.494118 0.007843 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.968627 0.203922 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.4 0.427451 0.52549 0.066667 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.576471 0.603922 0.639216 0.419608 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.227451 0.384314 0.635294 0.011765 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.360784 0.572549 0.839216 0.227451 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.392157 0.639216 0.933333 0.356863 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.478431 0.733333 0.835294 0.682353 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.1 g(K=90)Pc0.2 g(K=80)Pc0.3 g(K=70)Pc0.4 g(K=60)Pc0.5 g(K=50)Pc0.6 g(K=40)Pc0.7 g(K=30)Pc0.8 g(K=20)Pc0.9 g(K=10)Pc0.95 g(R=241 G=241  B=242)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Auu0 O0 J 0 j 1 w 4 M []0 d0 XR650.6299 319.8784 m649.1826 318.7671 647.4912 317.6987 645.5352 316.4634 c638.5254 312.0332 632.5615 305.9614 629.6299 298.085 c626.083 288.5498 630.5322 279.916 629.6416 270.0176 c628.6533 259.0146 617.3223 251.8389 613.166 242.1816 c608.2705 230.8096 617.7578 216.918 610.083 206.2363 c607.3037 202.3711 601.4033 201.3271 597.7744 198.4346 c592.4326 194.1768 591.1582 189.4746 588.9395 183.3711 c582.8633 166.6641 567.6016 152.3701 548.876 156.4668 c533.833 159.7588 523.5957 144.042 508.0684 147.7139 c501.2285 149.3379 498.3281 151.2041 490.7832 149.6719 c484.0938 148.3213 479.8467 145.4971 472.8154 147.0566 c465.6875 148.6455 464.9941 151.7998 456.583 149.8691 c439.9775 146.0791 433.3955 142.6602 416.123 148.4316 c401.4517 153.3359 388.585 141.9219 373.9712 147.8359 c368.2046 150.1689 364.5293 154.0283 357.2964 153.5449 c349.5581 153.0117 343.7031 147.71 335.7612 149.7939 c329.5146 151.4463 324.8003 157.5381 317.5347 158.1094 c312.124 158.5332 307.1118 155.9688 301.7158 156.5 c295.604 157.1025 292.6577 161.7803 287.2173 163.5752 c281.084 165.5967 279.5415 163.4424 274.481 162.3291 c268.6079 161.0361 266.2451 165.417 262.6099 169.791 c256.752 176.8369 249.1953 172.9795 241.8599 175.0049 c228.5083 178.6924 224.6548 192.6133 221.9072 204.5625 c220.3921 211.1455 220.0107 217.998 217.9126 224.4512 c215.5801 231.6201 210.4189 234.8027 206.7593 240.9063 c199.3574 253.25 203.0625 268.5371 200.7817 282.04 c199.4116 290.1533 195.7388 297.2124 188.7822 301.8887 C186.2319 290.6211 191.3101 273.8516 193.3208 262.3428 c195.75 248.4375 198.8638 234.6309 203.3262 221.2275 c235.2534 125.4443 332.9106 61.5264 433.0186 61.5264 c568.79 61.5264 678.8594 171.5918 678.8594 307.3628 c678.8594 332.2241 674.7236 357.4878 667.9404 381.1411 c666.1953 387.2212 662.9268 396.8584 658.3506 400.6167 C656.1846 394.8013 659.9063 388.6382 658.9463 382.752 c658.084 377.4536 653.8027 373.6592 652.7832 368.416 c650.3906 356.0762 659.373 343.4131 657.0615 330.9092 c656.0156 325.2437 653.9658 322.4404 650.6299 319.8784 cBb1 (Unnamed gradient 154) 407.5186 370.5576 -67.891 273.7725 1 0 0 1 0 0 Bg103.0397 -253.6418 -465.4388 -189.0802 637.7715 464.0957 Xm3085.9395 -7596.3311 -465.4388 -189.0802 -2448.168 8060.4268 Bc103.0397 -253.6418 -465.4388 -189.0802 637.7715 464.0957 Bm3085.9395 -7596.3311 -465.4388 -189.0802 740.8115 210.4541 Bcf0 BBUu*u0 g188.7686 303.2349 m188.7822 440.4097 299.9678 551.5952 437.1367 551.6069 C437.1367 551.6069 L574.3252 551.5952 685.5039 440.4097 685.5156 303.2349 C685.5156 303.2349 L685.5039 166.0684 574.3252 54.8838 437.1367 54.8721 C437.1367 54.8721 L299.9678 54.8838 188.7822 166.0684 188.7686 303.2349 C188.7686 303.2349 Lf1 D263.8843 476.4912 m220.605 433.1865 193.8379 373.4302 193.8379 307.3628 C193.8379 307.3628 L193.8379 241.2969 220.605 181.5508 263.8843 138.2461 C263.8843 138.2461 L307.189 94.9531 366.9453 68.1953 433.0088 68.1953 C433.0088 68.1953 L499.0781 68.1953 558.8311 94.9531 602.1416 138.2461 C602.1416 138.2461 L645.4346 181.5508 672.1807 241.2969 672.1807 307.3628 C672.1807 307.3628 L672.1807 373.4302 645.4346 433.1865 602.1416 476.4912 C602.1416 476.4912 L558.8311 519.7842 499.0781 546.5435 433.0088 546.5435 C433.0088 546.5435 L366.9453 546.5435 307.189 519.7842 263.8843 476.4912 C263.8843 476.4912 LBb1 (Unnamed gradient 154) 409.4722 371.3516 -67.891 273.7711 1 0 0 1 0 0 Bg103.0391 -253.6405 -525.7267 -213.5716 672.3359 478.1377 Xm3157.9961 -7773.7061 -525.7267 -213.5716 -2485.6602 8251.8438 Bc103.0391 -253.6405 -525.7267 -213.5716 672.3359 478.1377 Bm3157.9961 -7773.7061 -525.7267 -213.5716 775.375 224.4971 Bcf0 BB*UUuu0 D216.4517 394.0078 m218.8115 400.6211 223.2827 409.2314 226.8994 414.0205 C228.1709 417.4912 228.9878 420.6099 228.6445 422.3193 C228.1914 422.8745 L224.2856 424.4316 209.8833 396.5742 211.8047 391.1611 c212.333 389.6807 214.0947 390.8672 216.4517 394.0078 CBb1 (Unnamed gradient 154) 259.3774 310.3599 -67.891 273.8122 1 0 0 1 0 0 Bg103.0546 -253.6786 -29.0874 -11.8165 273.8906 316.2559 Xm3067.8901 -7551.9019 -29.0874 -11.8165 -2793.9995 7868.1577 Bc103.0546 -253.6786 -29.0874 -11.8165 273.8906 316.2559 Bm3067.8901 -7551.9019 -29.0874 -11.8165 376.9453 62.5771 Bcf0 BB215.9375 328.7495 m212.79 340.5073 220.605 361.5781 228.2515 358.7119 C228.7974 358.4375 L228.2051 360.6187 227.2813 362.4702 225.8076 363.647 C225.0684 364.022 L216.6689 367.1665 208.0464 341.4766 213.9419 330.9072 c214.519 329.8652 215.2041 329.2178 215.9375 328.7495 CBb1 (Unnamed gradient 154) 238.7305 301.98 -67.891 273.8218 1 0 0 1 0 0 Bg103.0582 -253.6876 -27.6837 -11.2462 251.9961 307.3691 Xm3041.2278 -7486.2695 -27.6837 -11.2462 -2789.2314 7793.6387 Bc103.0582 -253.6876 -27.6837 -11.2462 251.9961 307.3691 Bm3041.2278 -7486.2695 -27.6837 -11.2462 355.0542 53.6816 Bcf0 BB227.6997 305.1855 m228.3037 305.1401 229.063 304.8599 229.6177 304.6445 C230.5591 304.0898 231.3975 303.3911 232.1426 302.5894 C230.9058 305.7085 229.0718 308.4014 226.4316 309.9487 C225.8828 310.1621 225.1118 310.4502 224.5195 310.5015 c214.999 311.3384 211.7031 287.8018 219.7476 276.4668 c220.0742 276.0049 220.4116 275.5889 220.7563 275.208 C215.6958 287.2949 219.2075 305.9355 227.6997 305.1855 cBb1 (Unnamed gradient 154) 223.166 295.666 -67.891 273.765 1 0 0 1 0 0 Bg103.0368 -253.6349 -26.4324 -10.7379 235.1646 300.54 Xm3016.1362 -7424.5044 -26.4324 -10.7379 -2780.9717 7725.0444 Bc103.0368 -253.6349 -26.4324 -10.7379 235.1646 300.54 Bm3016.1362 -7424.5044 -26.4324 -10.7379 338.2012 46.9053 Bcf0 BB258.7456 293.3018 m260.0054 293.0117 L262.1914 292.1631 263.9995 290.7832 265.4751 289.0791 C263.7598 293.1689 260.9902 296.7109 256.813 298.3218 C255.5654 298.6177 L244.1094 300.3848 238.731 279.2285 247.4629 266.7334 c247.7837 266.2773 248.1216 265.8721 248.457 265.4736 C243.1016 277.9873 248.457 294.8906 258.7456 293.3018 CBb1 (Unnamed gradient 154) 245.3037 304.6597 -67.891 273.7573 1 0 0 1 0 0 Bg103.0339 -253.6278 -30.0967 -12.2265 259.0381 310.2393 Xm3016.5247 -7425.4609 -30.0967 -12.2265 -2757.4863 7735.7002 Bc103.0339 -253.6278 -30.0967 -12.2265 259.0381 310.2393 Bm3016.5247 -7425.4609 -30.0967 -12.2265 362.0723 56.6113 Bcf0 BB271.6084 239.5645 m272.4229 239.582 273.4971 239.3906 274.2974 239.252 C277.9868 238.0674 280.9004 235.7168 283.1685 232.8623 C280.8213 237.9805 276.9092 242.7012 271.1113 244.5566 C270.3057 244.7061 269.2368 244.8896 268.4165 244.8682 c257.5327 244.6357 255.6812 227.5361 264.4795 216.1621 C259.6182 226.8887 262.3247 239.3564 271.6084 239.5645 cBb1 (Unnamed gradient 154) 241.3828 303.0664 -67.891 273.7665 1 0 0 1 0 0 Bg103.0374 -253.6363 -29.1571 -11.8448 254.623 308.4453 Xm2993.7085 -7369.2964 -29.1571 -11.8448 -2739.0854 7677.7417 Bc103.0374 -253.6363 -29.1571 -11.8448 254.623 308.4453 Bm2993.7085 -7369.2964 -29.1571 -11.8448 357.6606 54.8086 Bcf0 BB313.583 231.0596 m314.0645 231.0264 314.6846 230.9395 315.1641 230.8857 C320.1069 229.7891 323.7749 227.0146 326.4121 223.6436 C324.0435 229.2461 319.3745 234.5596 311.9702 236.2021 C311.4922 236.248 310.8726 236.3467 310.3984 236.3643 c297.6011 236.9404 293.3647 219.9326 302.5244 208.4033 C297.9521 219.2061 302.6543 231.5518 313.583 231.0596 cBb1 (Unnamed gradient 154) 273.3374 316.0308 -67.891 273.7243 1 0 0 1 0 0 Bg103.0215 -253.5972 -33.366 -13.5546 288.5317 322.2036 Xm2997.3818 -7378.3394 -33.366 -13.5546 -2708.8501 7700.543 Bc103.0215 -253.5972 -33.366 -13.5546 288.5317 322.2036 Bm2997.3818 -7378.3394 -33.366 -13.5546 391.5532 68.6064 Bcf0 BB536.8828 515.5952 m537.085 514.6953 540.4072 512.3262 544.7969 509.626 C548.2988 508.4849 553.1934 506.3706 557.832 503.8457 c561.2119 502.0142 564.1504 500.1484 566.4629 498.4707 C567.2129 498.2354 567.8242 498.0996 568.1211 498.1704 c569.1074 498.4072 568.1484 499.8008 565.8838 501.7334 C558.6055 504.7798 543.7354 513.1377 539.6689 515.4985 C538.166 515.8696 537.1084 515.9604 536.8828 515.5952 CBb1 (Unnamed gradient 154) 579.7598 440.5352 -67.891 273.765 1 0 0 1 0 0 Bg103.0368 -253.6349 -25.5132 -10.3645 592.6484 445.7715 Xm3176.0681 -7818.1919 -25.5132 -10.3645 -2583.4199 8263.9629 Bc103.0368 -253.6349 -25.5132 -10.3645 592.6484 445.7715 Bm3176.0681 -7818.1919 -25.5132 -10.3645 695.6855 192.1367 Bcf0 BB535.3301 521.646 m535.3809 521.5059 L535.7559 521.3755 536.1328 521.2471 536.583 521.0811 c541.7656 519.0083 546.832 516.7046 551.7754 514.1797 c556.5723 511.6768 561.377 508.915 562.2441 508.1592 C561.5986 508.2559 552.7822 512.3599 544.9141 516.0591 C553.6367 511.2783 565.3535 505.1567 566.6523 505.9858 C566.001 507.5195 558.5586 512.3203 551.0137 516.0513 c544.5898 519.2295 536.7568 522.23 535.3301 521.646 CBb1 (Unnamed gradient 154) 580.6182 440.8794 -67.891 273.7701 1 0 0 1 0 0 Bg103.0388 -253.6397 -25.1359 -10.2112 593.1865 445.9849 Xm3178.6284 -7824.4946 -25.1359 -10.2112 -2585.4419 8270.4795 Bc103.0388 -253.6397 -25.1359 -10.2112 593.1865 445.9849 Bm3178.6284 -7824.4946 -25.1359 -10.2112 696.2256 192.3447 Bcf0 BB529.3027 527.2661 m529.5117 527.1416 557.8828 513.6372 559.0557 513.4692 C558.1895 514.2275 553.3945 516.9854 548.5879 519.4902 c543.6426 522.0132 538.5713 524.3188 533.3936 526.3936 c531.1465 527.2129 529.6982 527.627 529.0625 527.627 C529.0723 527.4414 L529.3027 527.2661 LBb1 (Unnamed gradient 154) 576.9844 439.417 -67.891 273.73 1 0 0 1 0 0 Bg103.0237 -253.6025 -24.5704 -9.98151 589.2705 444.4077 Xm3180.2275 -7828.4307 -24.5704 -9.98151 -2590.957 8272.8379 Bc103.0237 -253.6025 -24.5704 -9.98151 589.2705 444.4077 Bm3180.2275 -7828.4307 -24.5704 -9.98151 692.2939 190.8057 Bcf0 BB356.4849 225.4102 m357.002 225.4102 357.689 225.3525 358.2139 225.3291 C363.8896 224.4629 367.9639 221.6777 370.7847 218.2188 C368.4414 223.9355 363.4336 229.3604 355.02 230.6318 C354.4932 230.6553 353.8062 230.7266 353.3047 230.7148 c339.814 230.5801 334.3677 214.0059 343.5864 202.7871 C339.3599 213.2715 345.0137 225.29 356.4849 225.4102 cBb1 (Unnamed gradient 154) 308.0742 330.1494 -67.891 273.7449 1 0 0 1 0 0 Bg103.0293 -253.6163 -36.4336 -14.8008 324.7251 336.9136 Xm3002.2561 -7390.3374 -36.4336 -14.8008 -2677.5313 7727.251 Bc103.0293 -253.6163 -36.4336 -14.8008 324.7251 336.9136 Bm3002.2561 -7390.3374 -36.4336 -14.8008 427.7539 83.2969 Bcf0 BB407.0542 222.0527 m413.1855 221.5039 417.4946 218.8467 420.3984 215.4512 C418.1445 221.1914 412.9722 226.5605 403.874 227.3623 C387.3945 227.1436 381.8198 209.8408 390.7642 199.1533 c390.8252 199.0781 390.9004 199.0215 390.9639 198.9443 C386.9346 209.2803 393.0186 221.8633 407.0542 222.0527 CBb1 (Unnamed gradient 154) 348.5093 346.6143 -67.891 273.8206 1 0 0 1 0 0 Bg103.0578 -253.6865 -38.843 -15.7796 366.3989 353.8818 Xm3009.5229 -7408.2256 -38.843 -15.7796 -2643.124 7762.1074 Bc103.0578 -253.6865 -38.843 -15.7796 366.3989 353.8818 Bm3009.5229 -7408.2256 -38.843 -15.7796 469.457 100.1953 Bcf0 BB572.7539 474.7324 m573.042 475.064 L575.9658 476.5981 584.9082 470.9741 591.1064 464.957 c592.9092 463.21 594.4561 461.4492 595.7393 459.7793 C594.585 462.6299 591.8467 466.4595 587.918 470.2612 c581.7139 476.2822 572.7754 481.9082 569.8574 480.3726 C569.5693 480.041 L568.8076 478.6592 570.2744 475.7432 572.8447 472.3813 C572.5107 473.3608 572.4482 474.1777 572.7539 474.7324 CBb1 (Unnamed gradient 154) 592.1133 445.5503 -67.891 273.7325 1 0 0 1 0 0 Bg103.0246 -253.6048 -20.2425 -8.22335 602.043 449.584 Xm3163.7922 -7787.9736 -20.2425 -8.22335 -2561.749 8237.5576 Bc103.0246 -253.6048 -20.2425 -8.22335 602.043 449.584 Bm3163.7922 -7787.9736 -20.2425 -8.22335 705.0674 195.9795 Bcf0 BB596.0752 441.8311 m592.6084 439.1304 595.7852 430.7231 600.7422 423.4922 C597.8418 429.1162 596.6299 434.4717 599.251 436.5229 C603.8154 438.4258 611.3838 431.2168 615.6602 425.1978 C614.9883 426.5659 614.1914 427.981 613.2432 429.4224 c609.165 435.6167 600.9033 443.8486 596.0752 441.8311 CBb1 (Unnamed gradient 154) 598.0078 447.9482 -67.891 273.8001 1 0 0 1 0 0 Bg103.05 -253.6674 -18.8388 -7.6531 607.0801 451.6338 Xm3148.7537 -7750.9546 -18.8388 -7.6531 -2541.6738 8202.5879 Bc103.05 -253.6674 -18.8388 -7.6531 607.0801 451.6338 Bm3148.7537 -7750.9546 -18.8388 -7.6531 710.1299 197.9668 Bcf0 BB615.9482 391.9961 m620.1074 393.4272 624.4639 389.9946 627.79 385.4404 C624.5332 392.1206 618.4434 399.251 612.7695 397.3086 C606.082 393.3486 609.4316 378.7583 615.751 370.1416 C611.708 378.4995 610.5059 388.7725 615.9482 391.9961 CBb1 (Unnamed gradient 154) 593.4707 446.1016 -67.891 273.7786 1 0 0 1 0 0 Bg103.042 -253.6475 -21.7937 -8.85351 603.6289 450.2285 Xm3129.1384 -7702.6699 -21.7937 -8.85351 -2525.5098 8152.8984 Bc103.042 -253.6475 -21.7937 -8.85351 603.6289 450.2285 Bm3129.1384 -7702.6699 -21.7937 -8.85351 706.6709 196.5811 Bcf0 BB589.1543 335.2915 m594.249 336.1719 598.2822 333.8765 601.1582 330.3784 C598.5586 336.4683 593.3711 341.8809 585.9658 340.5938 C574.0068 336.8057 573.168 318.6582 580.8691 309.4121 C576.9287 319.0474 579.207 332.1353 589.1543 335.2915 CBb1 (Unnamed gradient 154) 546.9297 427.1924 -67.891 273.7639 1 0 0 1 0 0 Bg103.0365 -253.634 -31.8175 -12.9256 561.5713 433.1401 Xm3096.0164 -7621.1367 -31.8175 -12.9256 -2534.4453 8054.2769 Bc103.0365 -253.634 -31.8175 -12.9256 561.5713 433.1401 Bm3096.0164 -7621.1367 -31.8175 -12.9256 664.6074 179.5059 Bcf0 BB533.4287 276.1338 m539.4775 276.5205 544.0352 274.4219 547.0732 271.084 C544.7168 277.2705 539.1025 282.0195 530.2285 281.4355 C514.0986 278.6641 509.0371 259.7842 517.9053 249.5586 c517.9639 249.499 518.0098 249.4658 518.0566 249.4131 C514.0518 259.8418 519.7246 273.7764 533.4287 276.1338 CBb1 (Unnamed gradient 154) 475.9229 398.3516 -67.891 273.7862 1 0 0 1 0 0 Bg103.0448 -253.6546 -40.429 -16.4239 494.6045 405.9409 Xm3057.5024 -7526.3311 -40.429 -16.4239 -2562.8979 7932.272 Bc103.0448 -253.6546 -40.429 -16.4239 494.6045 405.9409 Bm3057.5024 -7526.3311 -40.429 -16.4239 597.6494 152.2861 Bcf0 BB457.3115 221.6143 m463.5498 221.4248 467.8701 219.0322 470.749 215.7871 C468.6445 221.4814 463.4805 226.6357 454.1211 226.9238 C438.1963 225.8027 431.6348 209.7188 439.0254 199.2402 c439.3809 198.7305 439.7959 198.3047 440.1865 197.8545 C436.5225 208.0088 443.2656 220.627 457.3115 221.6143 CBb1 (Unnamed gradient 154) 391.1377 363.876 -67.891 273.7229 1 0 0 1 0 0 Bg103.021 -253.596 -39.5749 -16.0769 409.8657 371.4839 Xm3017.9226 -7428.9019 -39.5749 -16.0769 -2608.0566 7800.3857 Bc103.021 -253.596 -39.5749 -16.0769 409.8657 371.4839 Bm3017.9226 -7428.9019 -39.5749 -16.0769 512.8867 117.8877 Bcf0 BB508.0322 224.1807 m514.042 224.3584 518.2822 222.3838 521.0439 219.4424 C519.0889 224.9697 514.0518 229.7666 504.8389 229.4824 C488.1025 227.2695 482.9268 210.0205 489.2871 200.8809 c489.7197 200.2686 490.2051 199.7373 490.6787 199.2168 C487.5479 208.668 493.3125 222.2344 508.0322 224.1807 CBb1 (Unnamed gradient 154) 435.2734 381.7871 -67.891 273.702 1 0 0 1 0 0 Bg103.0131 -253.5765 -39.9576 -16.2324 454.3877 389.5518 Xm3027.9824 -7453.665 -39.9576 -16.2324 -2573.5947 7843.2168 Bc103.0131 -253.5765 -39.9576 -16.2324 454.3877 389.5518 Bm3027.9824 -7453.665 -39.9576 -16.2324 557.4004 135.9756 Bcf0 BBU598.6865 484.2769 m598.2012 484.7847 597.6797 485.2285 597.1611 485.6904 c592.3662 489.8735 585.6875 495.105 580.707 499.0767 C576.5771 502.1641 572.1357 505.2437 571.54 505.1367 C571.8906 504.7324 L572.0889 504.5645 597.6924 484.7588 598.6865 484.2769 CBb1 (Unnamed gradient 154) 603.2461 450.0708 -67.891 273.7639 1 0 0 1 0 0 Bg103.0365 -253.634 -19.7332 -8.01642 613.1133 454.0791 Xm3176.2578 -7818.6582 -19.7332 -8.01642 -2563.1445 8272.7373 Bc103.0365 -253.634 -19.7332 -8.01642 613.1133 454.0791 Bm3176.2578 -7818.6582 -19.7332 -8.01642 716.1494 200.4453 Bcf0 BB633.2686 445.5068 m633.0713 445.9331 632.7139 446.4878 631.1182 448.6436 C627.8828 452.9097 L616.2949 466.7197 L614.0078 469.2583 611.1533 472.2964 610.541 472.3184 C610.7959 471.8208 L612.5293 469.2646 632.4355 445.6528 633.2686 445.5068 CBb1 (Unnamed gradient 154) 622.3438 457.8311 -67.891 273.798 1 0 0 1 0 0 Bg103.0493 -253.6655 -13.8645 -5.63231 629.2773 460.6475 Xm3166.4763 -7794.5806 -13.8645 -5.63231 -2537.1992 8255.2285 Bc103.0493 -253.6655 -13.8645 -5.63231 629.2773 460.6475 Bm3166.4763 -7794.5806 -13.8645 -5.63231 732.3262 206.9824 Bcf0 BB658.6621 400.4038 m658.6621 401.6709 655.6816 407.895 654.3887 410.5107 C649.7314 419.5381 L648.9229 421.0088 L645.7578 426.623 642.6846 431.8423 641.749 431.9883 C641.8184 431.4277 L643.332 426.7412 657.0791 400.7983 658.6621 400.4038 CBb1 (Unnamed gradient 154) 631.7568 461.6641 -67.891 273.823 1 0 0 1 0 0 Bg103.0587 -253.6886 -8.12244 -3.29967 635.7842 463.3003 Xm3151.5325 -7757.7954 -8.12244 -3.29967 -2515.748 8221.0957 Bc103.0587 -253.6886 -8.12244 -3.29967 635.7842 463.3003 Bm3151.5325 -7757.7954 -8.12244 -3.29967 738.8428 209.6113 Bcf0 BBu207.3179 389.8384 m207.1738 390.4883 L206.3369 389.8306 204.4497 384.5996 203.0112 380.3315 C198.4502 364.9893 L196.186 356.2974 196.5215 355.6992 196.6797 355.4448 C197.4951 356.1812 199.4966 361.9927 201.0361 366.7305 c202.6138 371.5986 206.8105 385.231 207.3179 389.8384 CBb1 (Unnamed gradient 154) 231.8799 299.2202 -67.891 273.7269 1 0 0 1 0 0 Bg103.0225 -253.5996 -25.0599 -10.1804 244.3521 304.2871 Xm3048.1184 -7503.2319 -25.0599 -10.1804 -2803.7666 7807.519 Bc103.0225 -253.5996 -25.0599 -10.1804 244.3521 304.2871 Bm3048.1184 -7503.2319 -25.0599 -10.1804 347.3745 50.6875 Bcf0 BB208.3384 366.6196 m209.1006 366.0117 L210.2246 363.9272 210.2036 359.8726 209.6089 355.4448 C211.7197 362.7031 213.4365 372.8735 211.394 376.6519 C210.6265 377.2598 L206.917 378.3477 201.5479 363.874 200.0996 352.894 C202.416 360.7075 205.7759 367.3779 208.3384 366.6196 CBb1 (Unnamed gradient 154) 232.3276 299.3789 -67.891 273.8123 1 0 0 1 0 0 Bg103.0546 -253.6788 -22.1204 -8.98619 243.5928 303.9551 Xm3044.0979 -7493.3354 -22.1204 -8.98619 -2800.5049 7797.2905 Bc103.0546 -253.6788 -22.1204 -8.98619 243.5928 303.9551 Bm3044.0979 -7493.3354 -22.1204 -8.98619 346.6475 50.2764 Bcf0 BB195.144 337.2617 m194.7676 337.9033 L192.7515 339.0503 190.6924 320.1821 190.7852 308.6934 C191.4692 318.2793 192.9248 327.6006 194.3604 326.7798 C194.7305 326.1318 L195.1665 324.5015 195.3452 321.7734 195.375 318.6582 C195.8623 325.5713 196.0737 333.7935 195.144 337.2617 CBb1 (Unnamed gradient 154) 206.7666 289.0039 -67.891 273.7621 1 0 0 1 0 0 Bg103.0358 -253.6323 -17.4084 -7.072 215.4702 292.54 Xm3022.7786 -7440.855 -17.4084 -7.072 -2807.3086 7733.395 Bc103.0358 -253.6323 -17.4084 -7.072 215.4702 292.54 Bm3022.7786 -7440.855 -17.4084 -7.072 318.5059 38.9082 Bcf0 BB204.2305 311.4727 m205.3862 310.855 L207.4077 308.709 208.5635 304.5835 209.1182 300.043 C209.8369 307.7871 209.1499 319.2168 205.2393 323.3745 C204.0864 323.9863 L199.2852 324.9653 196.7588 308.6895 198.1758 297.0801 C198.8809 305.1914 201.0532 312.1201 204.2305 311.4727 CBb1 (Unnamed gradient 154) 210.0986 290.3604 -67.891 273.7209 1 0 0 1 0 0 Bg103.0203 -253.5941 -20.8442 -8.46777 221.1997 294.8701 Xm3018.1951 -7429.5723 -20.8442 -8.46777 -2796.9951 7724.4424 Bc103.0203 -253.5941 -20.8442 -8.46777 221.1997 294.8701 Bm3018.1951 -7429.5723 -20.8442 -8.46777 324.2197 41.2764 Bcf0 BB209.8032 257.4609 m210.5938 257.5537 211.3418 257.1611 211.9551 256.8369 C215.5356 254.1113 218.1445 248.2871 219.7476 242.4463 C219.7363 242.8232 219.7534 243.1572 219.7305 243.5498 c219.2686 251.1299 215.9702 263.7998 210.1348 268.2354 C209.5249 268.5645 208.7744 268.9521 207.9858 268.8652 c203.4189 268.3105 203.4102 256.8906 206.1489 246.8184 C205.9141 252.5908 206.9771 257.1152 209.8032 257.4609 cBb1 (Unnamed gradient 154) 197.9741 285.4463 -67.891 273.8459 1 0 0 1 0 0 Bg103.0673 -253.7099 -18.0571 -7.33553 207.7261 289.4082 Xm2993.2866 -7368.2578 -18.0571 -7.33553 -2785.5605 7657.666 Bc103.0673 -253.7099 -18.0571 -7.33553 207.7261 289.4082 Bm2993.2866 -7368.2578 -18.0571 -7.33553 310.7935 35.6982 Bcf0 BB242.8496 238.1016 m245.4673 235.4795 247.3789 231.4922 248.5171 227.3506 C248.7104 228.2412 248.8496 229.1709 248.9219 230.124 c249.4043 236.6641 246.8799 245.8594 242.145 250.6211 c238.728 254.04 232.2114 255.1279 229.1094 250.9561 c226.105 246.9238 226.4165 240.9443 228.229 235.3301 C228.5864 236.4434 229.1094 237.501 229.8052 238.4424 c232.9194 242.6143 239.4297 241.54 242.8496 238.1016 cBb1 (Unnamed gradient 154) 215.7832 292.6709 -67.891 273.7945 1 0 0 1 0 0 Bg103.048 -253.6623 -23.3861 -9.50039 228.0049 297.6357 Xm2991.3176 -7363.4111 -23.3861 -9.50039 -2763.3125 7661.0469 Bc103.048 -253.6623 -23.3861 -9.50039 228.0049 297.6357 Bm2991.3176 -7363.4111 -23.3861 -9.50039 331.0527 43.9736 Bcf0 BB227.4434 203.6064 m228.5576 204.002 229.5654 203.5908 230.6343 203.1689 C236.4546 199.9111 241.1943 191.6953 243.6304 185.0742 C243.9966 186.8555 243.8584 189.3379 243.1016 192.4121 c241.4492 199.2168 235.915 210.5869 228.811 214.5605 C227.7461 214.9893 226.7402 215.4033 225.6172 215.001 c222.4136 213.8682 222.9277 207.6221 225.4297 200.835 C225.7266 202.2207 226.3623 203.2256 227.4434 203.6064 cBb1 (Unnamed gradient 154) 198.3398 285.5693 -67.891 273.7457 1 0 0 1 0 0 Bg103.0296 -253.6171 -16.8918 -6.86213 207.085 289.1221 Xm2971.7585 -7315.2646 -16.8918 -6.86213 -2764.6738 7604.3867 Bc103.0296 -253.6171 -16.8918 -6.86213 207.085 289.1221 Bm2971.7585 -7315.2646 -16.8918 -6.86213 310.1147 35.5049 Bcf0 BB257.2119 192.0547 m258.4336 192.2168 259.626 191.9209 260.5884 191.6953 C267.4199 189.165 272.3765 182.4414 274.9624 176.3809 C275.2842 177.9404 275.3398 179.7725 274.9507 181.9668 c273.7603 188.6973 267.9565 199.7021 258.7686 203.0879 C257.8101 203.3301 256.6138 203.6191 255.3916 203.457 c249.5024 202.707 249.0313 195.0156 252.3853 187.1826 C252.9458 189.8359 254.479 191.707 257.2119 192.0547 cBb1 (Unnamed gradient 154) 219.4355 294.1445 -67.891 273.7526 1 0 0 1 0 0 Bg103.0322 -253.6234 -22.7284 -9.23319 231.1484 298.9028 Xm2971.9673 -7315.7783 -22.7284 -9.23319 -2740.8188 7614.6812 Bc103.0322 -253.6234 -22.7284 -9.23319 231.1484 298.9028 Bm2971.9673 -7315.7783 -22.7284 -9.23319 334.1807 45.2793 Bcf0 BB293.501 182.6025 m295.0107 182.8438 296.4282 182.6426 297.5752 182.4648 C305.1636 180.5342 310.2427 174.7617 312.874 169.1875 C313.1919 170.5293 313.3066 172.0479 313.1309 173.7695 c312.4497 180.4531 306.6143 191.1074 295.7554 193.8672 C294.6084 194.041 293.1909 194.25 291.6807 194.001 c284.3115 192.8164 282.9478 184.3125 286.8501 176.1895 C287.6084 179.5293 289.7837 182.0127 293.501 182.6025 cBb1 (Unnamed gradient 154) 247.335 305.502 -67.891 273.8003 1 0 0 1 0 0 Bg103.0501 -253.6676 -27.6828 -11.2459 261.4746 311.2461 Xm2974.0803 -7320.9795 -27.6828 -11.2459 -2712.6055 7632.2256 Bc103.0501 -253.6676 -27.6828 -11.2459 261.4746 311.2461 Bm2974.0803 -7320.9795 -27.6828 -11.2459 364.5249 57.5781 Bcf0 BB594.1797 474.0317 m597.5088 471.1616 600.8936 467.8608 603.5625 464.9668 C605.1221 466.2739 600.2803 473.0073 593.1279 479.186 c586.5547 484.8691 578.0977 489.978 576.623 488.2886 C576.4512 487.4277 577.4268 485.7832 579.0332 483.7798 C579.8936 484.7529 586.8896 480.3091 594.1797 474.0317 cBb1 (Unnamed gradient 154) 601.4521 449.3428 -67.891 273.7845 1 0 0 1 0 0 Bg103.0442 -253.653 -20.9397 -8.50654 612.3594 453.7734 Xm3169.3672 -7801.6968 -20.9397 -8.50654 -2557.0078 8255.4707 Bc103.0442 -253.653 -20.9397 -8.50654 612.3594 453.7734 Bm3169.3672 -7801.6968 -20.9397 -8.50654 715.4033 200.1201 Bcf0 BB590.6211 484.0322 m587.2236 487.0605 584.624 489.6704 584.1162 490.833 C584.0234 492.4102 590.3564 488.8213 597.1846 483.5034 C595.3945 485.1416 593.4756 486.812 591.5684 488.3398 c584.3359 494.1196 577.3232 498.1587 577.4141 496.4946 C578.2354 494.6431 584.3594 489.0977 590.6211 484.0322 CBb1 (Unnamed gradient 154) 603.4756 450.1787 -67.891 273.6879 1 0 0 1 0 0 Bg103.0078 -253.5635 -16.1463 -6.55927 611.5488 453.4585 Xm3173.0862 -7810.8521 -16.1463 -6.55927 -2561.5371 8264.3105 Bc103.0078 -253.5635 -16.1463 -6.55927 611.5488 453.4585 Bm3173.0862 -7810.8521 -16.1463 -6.55927 714.5566 199.8945 Bcf0 BB615.8672 443.0864 m617.4619 444.3242 620.7314 442.4077 624.0928 439.4111 C623.9668 439.5806 623.8623 439.7505 623.7354 439.9204 c619.1025 446.1304 611.1865 453.5728 608.3916 451.3955 C605.8271 447.2085 616.0527 432.4502 623.4355 425.8237 C618.293 432.561 614.1455 440.2461 615.8672 443.0864 CBb1 (Unnamed gradient 154) 612.0156 453.6377 -67.891 273.8463 1 0 0 1 0 0 Bg103.0674 -253.7102 -16.6656 -6.77024 619.2754 456.5869 Xm3155.9604 -7768.6953 -16.6656 -6.77024 -2536.6851 8225.2822 Bc103.0674 -253.7102 -16.6656 -6.77024 619.2754 456.5869 Bm3155.9604 -7768.6953 -16.6656 -6.77024 722.3428 202.877 Bcf0 BB618.0742 455.5112 m618.7549 457.5229 624.5332 452.4434 629.7666 446.2866 C628.6807 447.8008 627.5352 449.3325 626.2881 450.8799 c620.7998 457.6431 614.1455 463.6602 613.4287 461.5005 C613.498 458.6953 618.5244 451.4487 623.7813 445.0723 C620.5576 449.5044 618.1309 453.5728 618.0742 455.5112 CBb1 (Unnamed gradient 154) 620.208 456.9609 -67.891 273.7058 1 0 0 1 0 0 Bg103.0146 -253.5801 -13.3433 -5.42061 626.543 459.5347 Xm3162.1438 -7783.916 -13.3433 -5.42061 -2535.6006 8243.4512 Bc103.0146 -253.5801 -13.3433 -5.42061 626.543 459.5347 Bm3162.1438 -7783.916 -13.3433 -5.42061 729.5576 205.9551 Bcf0 BB634.457 396.0864 m638.166 398.2837 644.3701 391.167 648.1484 383.1899 C647.7793 386.4966 646.6699 390.5137 644.7627 394.6514 c641.0088 402.8081 634.6182 410.2383 630.8281 408 C627.8594 404.9204 629.6514 396.6411 633.083 389.1655 C632.7471 392.1719 633.0947 394.6768 634.457 396.0864 CBb1 (Unnamed gradient 154) 613.5859 454.2686 -67.891 273.7632 1 0 0 1 0 0 Bg103.0361 -253.6332 -16.177 -6.57177 621.6055 457.5264 Xm3138.124 -7724.7891 -16.177 -6.57177 -2516.5186 8182.3154 Bc103.0361 -253.6332 -16.177 -6.57177 621.6055 457.5264 Bm3138.124 -7724.7891 -16.177 -6.57177 724.6416 203.8936 Bcf0 BB643.2725 410.4141 m644.9824 412.8716 650.4365 405.7891 654.4932 397.8179 c655.6699 395.5317 656.665 393.2871 657.4961 391.1611 C657.0459 394.8213 655.0459 400.7568 651.9033 406.8984 c647.8369 414.8696 642.3848 421.9526 640.6846 419.4946 C640.0156 417.4121 641.1826 412.9746 643.1582 408.0708 C643.0654 409.0024 643.0771 409.8198 643.2725 410.4141 CBb1 (Unnamed gradient 154) 626.541 459.5342 -67.891 273.7664 1 0 0 1 0 0 Bg103.0374 -253.6363 -11.3597 -4.61476 632.3662 461.9009 Xm3145.9839 -7744.1367 -11.3597 -4.61476 -2513.6177 8206.0371 Bc103.0374 -253.6363 -11.3597 -4.61476 632.3662 461.9009 Bm3145.9839 -7744.1367 -11.3597 -4.61476 735.4033 208.2646 Bcf0 BB577.7559 277.1602 m585.0762 278.167 589.4775 274.2617 591.7539 269.3623 C591.8115 269.9863 591.8926 270.6143 591.9043 271.2617 c592.0664 278.8145 587.8711 290.1885 575.9355 288.5645 C563.209 285.2412 558.7832 269.6621 563.665 259.5 C564.5137 267.3408 569.3086 274.9531 577.7559 277.1602 CBb1 (Unnamed gradient 154) 517.7734 415.4272 -67.891 273.9016 1 0 0 1 0 0 Bg103.0882 -253.7615 -35.8306 -14.5558 536.125 422.8823 Xm3068.5645 -7553.5615 -35.8306 -14.5558 -2532.4395 7976.4438 Bc103.0882 -253.7615 -35.8306 -14.5558 536.125 422.8823 Bm3068.5645 -7553.5615 -35.8306 -14.5558 639.2129 169.1211 Bcf0 BB555.7393 223.7813 m562.4746 224.4414 566.6934 221.707 568.958 217.8242 C568.9756 217.9346 569.0029 218.0391 569.0264 218.1533 c570.2861 225.9648 566.4268 236.4219 553.9189 235.1797 C539.2637 232.1455 532.3945 215.6016 538.3555 205.9521 C539.7949 213.8682 546.0566 221.7822 555.7393 223.7813 CBb1 (Unnamed gradient 154) 478.8135 399.5508 -67.891 273.8147 1 0 0 1 0 0 Bg103.0555 -253.681 -40.1775 -16.3217 498.9863 407.7461 Xm3038.7959 -7480.2837 -40.1775 -16.3217 -2539.8096 7888.0298 Bc103.0555 -253.681 -40.1775 -16.3217 498.9863 407.7461 Bm3038.7959 -7480.2837 -40.1775 -16.3217 602.042 154.0654 Bcf0 BB598.5254 232.124 m603.6084 233.0244 606.8672 231.0264 608.751 227.8359 C609.7773 235.6357 606.8203 245.334 596.7109 243.5264 C584.0117 239.6094 578.0625 221.458 583.5732 212.5039 C584.7344 220.7656 590.1475 229.5459 598.5254 232.124 CBb1 (Unnamed gradient 154) 518.1641 415.5815 -67.891 273.8625 1 0 0 1 0 0 Bg103.0735 -253.7253 -36.7154 -14.9153 536.75 423.1318 Xm3049.8545 -7507.5054 -36.7154 -14.9153 -2513.1045 7930.6372 Bc103.0735 -253.7253 -36.7154 -14.9153 536.75 423.1318 Bm3049.8545 -7507.5054 -36.7154 -14.9153 639.8232 169.4063 Bcf0 BB334.4053 176.0508 m335.3486 176.126 336.6021 176.0332 337.542 175.958 C345.4063 174.5605 350.5054 169.6729 353.1763 164.5898 C353.4668 165.709 353.6304 166.9131 353.6006 168.2402 c353.4272 174.8848 347.7734 185.2129 335.7178 187.3623 C334.7822 187.4375 333.5327 187.5303 332.585 187.4434 c322.8828 186.6758 319.7539 177.0107 324.5723 168.1367 C325.6582 172.4131 328.9961 175.6191 334.4053 176.0508 cBb1 (Unnamed gradient 154) 278.6055 318.2075 -67.891 273.8009 1 0 0 1 0 0 Bg103.0503 -253.6682 -31.8677 -12.946 294.7051 324.748 Xm2978.2439 -7331.229 -31.8677 -12.946 -2683.5391 7655.9771 Bc103.0503 -253.6682 -31.8677 -12.946 294.7051 324.748 Bm2978.2439 -7331.229 -31.8677 -12.946 397.7554 71.0801 Bcf0 BB382.6113 169.8701 m390.7563 168.958 395.8394 164.6309 398.4019 159.8818 C399.1182 161.3428 399.5962 162.9844 399.6968 164.8262 c400.0737 171.4814 394.8091 181.4932 381.9009 182.9385 C368.3193 183.1914 363.457 171.7539 368.582 162.4639 C370.6919 166.8379 375.4063 169.9971 382.6113 169.8701 CBb1 (Unnamed gradient 154) 315.8579 333.333 -67.891 273.7801 1 0 0 1 0 0 Bg103.0425 -253.6489 -35.0412 -14.2352 333.5605 340.5244 Xm2984.6165 -7346.915 -35.0412 -14.2352 -2651.0557 7687.4395 Bc103.0425 -253.6489 -35.0412 -14.2352 333.5605 340.5244 Bm2984.6165 -7346.915 -35.0412 -14.2352 436.6035 86.876 Bcf0 BB430.6504 167.0273 m438.501 166.623 443.2959 163.0596 445.7793 158.8477 C446.6816 160.4063 447.3447 162.1572 447.623 164.1162 c448.541 170.7939 443.8447 180.5225 430.5 181.2051 C416.0596 180.6484 410.0054 168.2119 415.6113 158.9971 C418.1997 163.4053 423.3359 166.7432 430.6504 167.0273 CBb1 (Unnamed gradient 154) 356.0615 349.6084 -67.891 273.715 1 0 0 1 0 0 Bg103.018 -253.5886 -37.6831 -15.3084 374.9419 357.2783 Xm2992.1179 -7365.3813 -37.6831 -15.3084 -2617.1758 7722.6597 Bc103.018 -253.5886 -37.6831 -15.3084 374.9419 357.2783 Bm2992.1179 -7365.3813 -37.6831 -15.3084 477.96 103.6895 Bcf0 BB480.1289 167.582 m487.2002 167.6396 491.5791 164.9766 493.9658 161.4805 C494.793 162.9258 495.4502 164.4971 495.8213 166.2188 c497.2637 172.9619 493.3125 182.4355 479.9795 182.3301 C464.248 180.7988 458.748 167.0518 463.4922 158.8945 c463.666 158.6045 463.8848 158.3672 464.0703 158.0967 C466.7793 162.8564 472.1113 166.8066 480.1289 167.582 CBb1 (Unnamed gradient 154) 397.9155 366.6113 -67.891 273.7125 1 0 0 1 0 0 Bg103.0171 -253.5863 -38.8267 -15.773 417.519 374.5752 Xm3001.0969 -7387.4839 -38.8267 -15.773 -2583.5781 7762.0591 Bc103.0171 -253.5863 -38.8267 -15.773 417.519 374.5752 Bm3001.0969 -7387.4839 -38.8267 -15.773 520.5361 120.9893 Bcf0 BB529.4199 172.2607 m535.4502 172.6953 539.2754 170.8516 541.4932 168.125 C541.9902 169.124 542.4307 170.1826 542.7422 171.3037 c544.6592 178.1494 541.5732 187.3799 528.709 186.4482 C513.4629 183.9492 507.085 169.835 510.9854 161.9541 c511.3486 161.2158 511.7773 160.5566 512.251 159.957 C514.9141 165.6182 520.7197 170.8301 529.4199 172.2607 CBb1 (Unnamed gradient 154) 440.1563 383.813 -67.891 273.7661 1 0 0 1 0 0 Bg103.0373 -253.6359 -39.4265 -16.0167 460.5645 392.1035 Xm3011.1074 -7412.1255 -39.4265 -16.0167 -2550.543 7804.229 Bc103.0373 -253.6359 -39.4265 -16.0167 460.5645 392.1035 Bm3011.1074 -7412.1255 -39.4265 -16.0167 563.6016 138.4678 Bcf0 BB574.4688 178.7314 m578.6621 179.332 581.4775 178.375 583.2617 176.5781 C583.6191 177.3516 583.9307 178.1494 584.1973 178.9746 c586.4736 185.9531 584.7285 195.0576 573.7705 193.4639 C560.6846 190.1934 552.5732 175.0283 556.7227 166.8184 c557.125 166.0205 557.6348 165.3633 558.2012 164.7813 C561.0381 170.9678 566.918 176.8311 574.4688 178.7314 CBb1 (Unnamed gradient 154) 480.2041 399.9971 -67.891 273.6762 1 0 0 1 0 0 Bg103.0034 -253.5527 -38.2902 -15.555 500.3145 408.1665 Xm3021.6975 -7438.1943 -38.2902 -15.555 -2521.3828 7846.3608 Bc103.0034 -253.5527 -38.2902 -15.555 500.3145 408.1665 Bm3021.6975 -7438.1943 -38.2902 -15.555 603.3184 154.6143 Bcf0 BB617.8428 338.1284 m624.2314 339.8638 629.1074 333.811 631.5566 327.3345 C631.6494 329.4092 631.5352 331.6182 631.0947 333.9336 c629.6514 341.7192 624.002 351.7002 616.0166 349.5322 C608.4844 346.084 607.5605 333.811 610.9102 324.5215 C611.0957 330.5537 613.21 336.0083 617.8428 338.1284 CBb1 (Unnamed gradient 154) 576.6074 439.2627 -67.891 273.7964 1 0 0 1 0 0 Bg103.0487 -253.6641 -25.7896 -10.4768 589.9775 444.6943 Xm3105.6682 -7644.8955 -25.7896 -10.4768 -2515.6904 8089.5898 Bc103.0487 -253.6641 -25.7896 -10.4768 589.9775 444.6943 Bm3105.6682 -7644.8955 -25.7896 -10.4768 693.0264 191.0303 Bcf0 BB642.3135 349.2266 m647.3633 351.4751 651.9268 344.2183 654.1797 337.2046 C654.1797 339.8438 653.8574 342.7617 653.1406 345.8018 c651.3389 353.5005 646.208 363.1812 640.501 360.6304 C635.6016 357.0732 635.7158 346.4097 638.3965 337.6606 C638.3633 342.7222 639.4941 347.1792 642.3135 349.2266 CBb1 (Unnamed gradient 154) 602.1758 449.6274 -67.891 273.7512 1 0 0 1 0 0 Bg103.0316 -253.6221 -20.338 -8.26212 612.709 453.9063 Xm3115.7815 -7669.791 -20.338 -8.26212 -2503.0723 8123.6973 Bc103.0316 -253.6221 -20.338 -8.26212 612.709 453.9063 Bm3115.7815 -7669.791 -20.338 -8.26212 715.7402 200.2842 Bcf0 BB613.1289 285.7783 m618.9404 287.0576 622.7646 283.4922 624.8564 278.6641 C624.9023 279.3096 624.9473 279.957 624.9473 280.626 c624.9023 288.75 620.6387 299.2417 611.3145 297.1729 C600.916 293.29 597.668 277.3926 602.001 267.4434 C602.499 275.3516 606.2529 283.2041 613.1289 285.7783 CBb1 (Unnamed gradient 154) 551.4805 429.0034 -67.891 273.7157 1 0 0 1 0 0 Bg103.0183 -253.5893 -31.0426 -12.6108 567.4492 435.4907 Xm3078.7571 -7578.6514 -31.0426 -12.6108 -2511.3076 8014.1421 Bc103.0183 -253.5893 -31.0426 -12.6108 567.4492 435.4907 Bm3078.7571 -7578.6514 -31.0426 -12.6108 670.4678 181.9014 Bcf0 BBU675.8564 343.8237 m675.7637 344.3071 L675.7969 344.0723 675.8564 343.8135 675.8779 343.5767 C675.8779 343.6577 675.8564 343.7466 675.8564 343.8237 CBb1 (Unnamed gradient 154) 628.6904 459.9585 -67.891 272.8603 1 0 0 1 0 0 Bg102.6963 -252.7968 -3.86331 -1.56943 630.6221 460.7432 Xm3115.1465 -7668.2275 -3.86331 -1.56943 -2484.5244 8128.9707 Bc102.6963 -252.7968 -3.86331 -1.56943 630.6221 460.7432 Bm3115.1465 -7668.2275 -3.86331 -1.56943 733.3184 207.9463 Bcf0 BB320.3164 86.8301 m320.415 86.7725 L323.5181 85.2129 327.1685 83.4561 330.8457 81.7354 c328.5264 82.8564 325.4727 84.3467 321.1948 86.4277 C320.3164 86.8301 LBb1 (Unnamed gradient 154) 237.4268 301.2832 -67.891 273.5808 1 0 0 1 0 0 Bg102.9675 -253.4643 -10.967 -4.45524 242.9102 303.5107 Xm2928.3613 -7208.438 -10.967 -4.45524 -2685.4512 7511.9487 Bc102.9675 -253.4643 -10.967 -4.45524 242.9102 303.5107 Bm2928.3613 -7208.438 -10.967 -4.45524 345.8774 50.0469 Bcf0 BB340.728 77.1826 m341.6655 76.79 L338.4165 78.2471 334.6104 79.9678 330.8457 81.7354 c336.8096 78.8467 337.6821 78.4717 340.728 77.1826 CBb1 (Unnamed gradient 154) 244.7734 304.4556 -67.891 273.7807 1 0 0 1 0 0 Bg103.0427 -253.6495 -11.2687 -4.57782 250.4072 306.7441 Xm2927.7932 -7207.0396 -11.2687 -4.57782 -2677.3857 7513.7837 Bc103.0427 -253.6495 -11.2687 -4.57782 250.4072 306.7441 Bm2927.7932 -7207.0396 -11.2687 -4.57782 353.4502 53.0947 Bcf0 BB388.6182 62.8271 m389.6411 62.5791 L392.4404 62.0693 396.1812 61.4697 398.9922 61.0195 C401.0391 60.7295 L397.3794 61.25 393.7686 62.0596 390.1245 62.6777 c388.731 62.8906 388.6992 62.8672 388.6182 62.8271 CBb1 (Unnamed gradient 154) 288.9766 322.3433 -67.891 273.7158 1 0 0 1 0 0 Bg103.0183 -253.5893 -13.6365 -5.53969 295.7949 325.1133 Xm2929.6831 -7211.6924 -13.6365 -5.53969 -2633.8882 7536.8057 Bc103.0183 -253.5893 -13.6365 -5.53969 295.7949 325.1133 Bm2929.6831 -7211.6924 -13.6365 -5.53969 398.8135 71.5244 Bcf0 BB465.5723 60.3604 m467.3154 60.5791 L470.6777 61.043 475.1387 61.8164 478.4951 62.377 C478.7891 62.498 L478.5068 62.5156 478.084 62.4619 477.0674 62.3125 c473.2324 61.7061 469.4297 60.8691 465.5723 60.3604 CBb1 (Unnamed gradient 154) 355.0889 349.6597 -67.891 274.0996 1 0 0 1 0 0 Bg103.1628 -253.945 -15.7961 -6.41703 362.9873 352.8682 Xm2942.6387 -7243.583 -15.7961 -6.41703 -2579.6514 7596.4512 Bc103.1628 -253.945 -15.7961 -6.41703 362.9873 352.8682 Bm2942.6387 -7243.583 -15.7961 -6.41703 466.1504 98.9229 Bcf0 BBuu0 0 0 0 1 1 1 Xa665.9883 358.6665 m665.1211 361.8701 663.8281 365.3799 662.3721 368.1714 C665.4336 356.5718 664.6592 346.2515 660.8008 347.9551 c659.5645 348.4902 658.2363 350.2788 656.9766 352.7305 C658.9629 345.5293 661.9668 339.0186 664.5449 337.8818 c668.4834 336.1582 669.2354 346.8398 665.9883 358.6665 cf648.3457 302.3999 m648.8076 288.1592 641.4941 277.0908 635.0918 282.332 c634.6992 282.6475 634.3418 283.0547 633.9824 283.4746 C634.666 278.6045 636.3066 274.3525 638.8584 272.2627 c645.2607 267.0215 652.5625 278.0918 652.1123 292.332 c651.9502 297.23 650.5986 302.9014 648.0107 306.0874 C648.1963 304.8477 648.3105 303.6001 648.3457 302.3999 cf634.4443 252.4229 m634.4805 250.7256 634.3662 248.9922 634.0996 247.3633 c631.9277 233.8457 622.1074 224.1172 616.2715 228.4365 C616.3057 225.0986 616.9766 222.1172 618.4092 220.0273 c623.8281 212.0996 635.4629 222.4297 637.8662 237.2998 c638.7773 243.0283 638.0273 249.8945 634.4443 252.4229 Cf612.9434 202.0117 m612.7246 200.6553 612.3672 199.2637 611.9033 197.957 c607.9531 186.6934 597.9805 178.75 592.2734 180.5811 C591.835 177.8652 591.9854 175.3936 592.8516 173.5107 c596.7109 165.1094 610.7715 173.9844 615.6602 187.8818 c617.6816 193.626 617.7266 200.626 612.9434 202.0117 Cf269.2744 153.7861 m269.2627 151.1758 267.6973 150.1416 264.7251 151.2783 c259.3667 153.3477 253.2085 160.0254 249.3462 166.3564 C249.1006 159.8818 259.8315 144.543 268.4858 141.2148 c273.1309 139.4307 274.4009 142.9482 271.5127 149.5928 c270.9702 150.8467 270.1934 152.2852 269.2744 153.7861 Cf300.4912 147.0264 m300.4712 142.0713 296.2705 140.4053 289.8843 143.6982 c285.0361 146.207 280.8691 150.292 278.0459 154.4688 C277.8901 148.4023 284.6099 138.3037 293.647 133.6367 c301.5391 129.5586 306.2041 132.9775 303.6157 140.9502 c303.0474 142.7236 301.9458 144.8496 300.4912 147.0264 Cf340.8838 134.4346 m340.4673 136.6113 339.2456 139.2744 337.3247 141.8682 C337.0762 134.5723 328.7813 132.6533 319.6489 138.6055 c316.8047 140.4648 314.499 142.666 312.752 144.9697 C312.5186 139.9551 316.3247 133.1514 323.4019 128.542 c333.564 121.9209 342.7139 125.0117 340.8838 134.4346 cf334.0654 110.8281 m333.0488 109.1074 330.3364 108.6963 326.3115 110.0879 c321.106 111.875 316.167 115.4854 312.7949 119.2002 C309.8379 114.9424 319.4277 103.6768 330.0664 100.0244 c336.9399 97.6514 340.1104 100.3838 337.2676 106.2529 c336.6084 107.5986 335.4985 109.1885 334.0654 110.8281 Cf351.6348 136.1895 m350.8926 136.8604 350.2529 137.5527 349.6646 138.2461 C349.3091 134.4678 351.1255 129.9629 355.3872 126.1377 c365.4902 117.0332 380.1636 119.5977 379.5337 130.3535 c379.3838 132.873 378.085 135.9941 375.7222 138.8301 C374.8691 129.4414 361.2129 127.5762 351.6348 136.1895 cf422.7891 128.3564 m423.0518 131.2793 421.8398 134.918 418.9341 137.8984 C417.418 126.7393 400.5376 124.3018 391.8027 133.5674 C391.4097 130.7012 392.2588 127.5703 394.4536 124.7393 c402.9009 113.833 421.7134 116.2471 422.7891 128.3564 cf467.0732 128.8809 m467.8467 132.2148 466.8086 136.3564 463.3535 139.292 C463.3301 139.1699 463.3418 139.0557 463.3066 138.9512 c460.707 127.7715 444.2891 123.8965 436.0078 131.1572 C435.5713 128.5059 436.0078 125.8193 437.5098 123.585 c444.5889 113.0693 464.2031 116.583 467.0732 128.8809 cf510.9619 132.0713 m512.3652 135.8887 511.6494 140.6152 507.4902 143.248 C507.3965 142.873 507.3398 142.498 507.207 142.1387 c503.3643 131.6729 488.1357 126.6924 480.5107 131.6602 C479.9521 129.2559 480.0723 126.8994 481.1064 124.959 c484.376 118.8232 493.3125 118.3281 500.7246 121.7471 C500.8467 121.8037 500.9736 121.8516 501.0996 121.9092 c505.4922 124.041 509.3037 127.5352 510.9619 132.0713 cf549.292 149.8809 m549.1025 149.2393 548.8877 148.6094 548.5938 147.998 c543.7568 137.8418 530.874 132.042 524.0068 134.9766 C523.3418 132.7822 523.251 130.7012 523.8623 129.0156 c527.3623 119.2041 546.2656 125.1328 552.3535 137.9346 c554.4922 142.4287 554.3535 147.9746 549.292 149.8809 Cf584.4521 158.2354 m584.1338 157.4609 583.7754 156.6914 583.3643 155.9473 c578.5361 147.165 569.4375 141.041 563.7813 141.124 C562.8105 138.6387 562.3936 136.3389 562.8164 134.6182 c564.8438 126.2871 580.2871 133.4512 587.1211 145.8838 c590.1016 151.3145 590.8301 158.0498 584.4521 158.2354 Cf365.8223 107.8994 m364.1875 103.7813 356.9863 103.3291 349.333 107.8125 c347.1001 109.1133 345.2764 110.6094 343.77 112.1455 C342.0449 108.4082 345.6553 102.1172 353.0933 97.7422 c362.7661 92.0771 371.7422 94.2783 369.6479 101.8174 c369.1484 103.6074 367.8276 105.8027 365.8223 107.8994 Cf402.3735 106.5996 m400.1328 99.8408 387.6924 99.3906 379.8184 106.5645 C378.7383 103.8379 379.6348 100.3359 382.9941 97.0215 c391.6978 88.4131 406.8726 89.7539 406.5171 99.1006 c406.438 101.3555 405.0859 104.1953 402.3735 106.5996 Cf440.6523 107.2002 m437.7383 99.748 425.1504 97.8291 418.0259 103.0586 C417.1196 100.7646 417.3745 98.2119 418.9575 95.8887 c425.125 86.8652 442.7861 88.668 444.8555 98.5186 c445.4336 101.2744 444.2314 104.7861 440.6523 107.2002 Cf479.3164 109.6504 m475.4844 102.3242 463.7803 99.1699 457.1143 102.2217 C456.1211 100.0479 455.9824 97.8291 456.7959 96.0273 c460.6318 87.4775 479.0439 90.3652 483.4102 100.1982 c485.0742 103.9072 483.7002 107.7432 479.3164 109.6504 Cf517.0674 114.1787 m512.3779 107.1543 502.2568 103.0977 495.9766 104.0693 C494.7686 102.0361 494.1846 100.0244 494.4688 98.4082 c495.9707 89.9629 514.2959 94.0176 520.9512 104.2764 c523.9492 108.876 522.9727 113.2363 517.0674 114.1787 CfUuu194.6758 282.1855 m193.7246 282.8447 L193.7139 282.8447 193.7139 282.8271 193.7017 282.8213 C195.7734 277.0449 197.417 267.3057 198.0171 260.9961 c198.6904 253.9258 198.3784 249.4873 197.272 249.4131 C197.8789 247.7324 198.4966 246.4492 199.0918 245.8906 c200.6138 244.4502 201.1509 249.1084 200.374 257.2178 c199.6406 264.877 197.3872 277.6934 194.6758 282.1855 Cf209.8198 225.4912 m212.7661 220.1982 215.4814 213.3467 216.8789 208.6406 c219.0635 201.3545 219.0483 197.207 216.8306 198.5986 c216.1338 199.0391 215.3364 199.876 214.5054 201.0127 C216.189 197.9922 217.8354 195.6631 219.188 194.8262 c221.3945 193.4404 221.4175 197.5762 219.231 204.8662 c217.4604 210.7998 213.624 220.1982 209.8198 225.4912 Cf669.9736 305.2686 m669.6279 311.2715 668.0684 318.3701 665.4336 320.498 C666.6475 317.3257 667.3857 312.9551 667.6064 309.0469 c668.3691 295.7871 664.4404 284.5088 660.2334 287.8232 C660.8926 286.126 661.6553 284.7871 662.5576 284.0576 c666.7734 280.6855 670.7256 291.9854 669.9736 305.2686 cf658.167 265.1143 m658.998 261.8965 658.9404 257.3105 658.3291 253.3584 c656.4453 240.9951 650.0439 230.8174 646.001 232.9551 C646.3223 231.6953 646.7861 230.6553 647.4199 229.9287 c651.3271 225.3652 658.6504 236.2139 660.6953 249.582 c661.6436 255.7734 661.2402 263.5029 658.167 265.1143 Cf641.0439 213.1729 m641.2969 210.3203 640.4658 206.3467 639.1826 202.7979 c635.2422 192.0195 627.4453 183.3926 623.4453 184.3818 C623.5498 183.458 623.7354 182.627 624.0928 181.9834 c626.9707 176.6631 636.9063 186.373 641.5391 199.0215 c643.7227 205.04 644.5918 212.2852 641.0439 213.1729 Cf241.7549 167.3037 m242.4629 166.1152 243.1104 164.9707 243.6187 163.999 c246.6133 158.2471 247.2954 154.7295 245.3145 155.2666 c242.4717 156.0166 236.9839 162.6377 232.5176 169.4297 C237.1968 161.5283 244.2915 152.3877 247.6655 151.4883 c249.6553 150.9512 248.9741 154.4688 245.9756 160.2207 c244.9648 162.1641 243.4707 164.6826 241.7549 167.3037 Cf282.3042 117.8994 m278.8296 117.7617 266.3105 129.3037 260.8076 136.5068 C263.0371 130.8574 280.4663 113.9531 284.6553 114.1211 c285.8335 114.1631 284.9648 116.1719 282.5391 119.4473 C282.916 118.5117 282.9063 117.9229 282.3042 117.8994 cf305.793 114.0879 m307.3408 110.8223 306.6143 109.1074 303.6157 109.7305 c297.666 110.9551 288.8066 118.2686 284.207 124.2773 C287.0239 118.1064 298.667 107.4668 305.9746 105.9521 c309.6704 105.1904 309.9741 107.9404 306.7231 112.7988 c306.4663 113.1973 306.123 113.6357 305.793 114.0879 Cf339.7017 85.3516 m335.9331 85.1387 323.2754 92.1221 317.9258 97.2295 C317.3711 93.1055 337.1689 81.2969 342.0566 81.5732 c344.4375 81.7129 342.0566 84.5322 340.6807 85.9814 C340.6196 85.6357 340.3472 85.3926 339.7017 85.3516 cf365.7705 83.2666 m366.2246 81.4229 365.0898 80.2109 361.2935 80.8115 c355.1128 81.8154 347.937 85.9873 344.2832 89.7539 C344.9565 85.6514 355.2153 78.3965 363.6484 77.0449 c368.8896 76.1953 369.0952 78.8174 366.9927 81.7979 c366.6748 82.2441 366.2505 82.752 365.7705 83.2666 Cf554.6777 120.0654 m554.4561 118.5117 553.6484 116.7725 552.6025 115.2881 C551.7656 114.1787 L545.8379 106.7383 535.2998 101.7246 530.5166 102.9541 C530.4541 102.498 530.3555 102.0127 530.4238 101.6191 c531.5098 95.3574 546.584 100.9326 554.123 110.4121 C554.9482 111.5098 L557.1846 114.6875 558.3691 118.9736 554.6777 120.0654 Cf613.5439 167.0273 m613.3604 164.8682 612.4004 162.209 611.1865 159.9385 c610.9453 159.5068 610.6338 158.9404 610.3789 158.5117 c605.0635 149.5117 596.5488 142.5459 592.4014 142.7705 C592.3301 142.0361 592.3418 141.3613 592.4922 140.8242 c594.0635 135.1152 605.9766 143.3076 612.7363 154.7334 c612.9912 155.1621 613.3027 155.7324 613.5332 156.166 c615.9004 160.6045 617.4961 166.6445 613.5439 167.0273 Cf581.043 127.4893 m580.7432 126.7041 580.3838 126.0107 580.1943 125.6875 c579.6631 124.7754 578.6621 123.2725 576.9404 121.3145 c571.5693 115.2422 563.2725 109.5928 558.9395 108.8525 C558.5586 107.9053 558.3691 107.0801 558.4658 106.4502 c559.1367 101.7002 571.9619 109.2334 579.2979 117.542 c581.0195 119.4941 582.0137 120.9971 582.5508 121.9092 c583.1689 122.9941 585.6875 127.8467 581.043 127.4893 Cf392.521 82.1865 m393.8359 77.1016 386.1055 75.9531 377.6309 80.1992 c375.2422 81.4014 373.3887 82.7637 372.0146 84.1494 C372.5063 81.7227 375.3252 78.7539 379.9897 76.4209 c388.7231 72.042 396.7554 73.3652 394.8091 78.8584 c394.4536 79.8516 393.6484 81.0186 392.521 82.1865 Cf423.4863 82.2559 m423.5488 81.8965 423.6025 81.5391 423.5869 81.2041 c423.2139 74.5596 409.6499 73.9473 403.272 79.834 C403.4595 78.8584 403.9272 77.8643 404.7861 76.8945 c410.7158 70.1113 425.5449 70.4805 425.9375 77.4258 c426.0166 78.8926 425.2109 80.6729 423.4863 82.2559 Cf455.8486 83.7461 m455.8838 83.0303 455.7969 82.3018 455.4502 81.585 c452.5049 75.2754 440.5596 73.6475 435.3145 77.4951 C435.3398 77.2119 435.3398 76.9277 435.4326 76.6641 c437.7383 69.3838 454.2715 70.2285 457.8125 77.8066 c458.8135 79.9326 458.1191 82.1631 455.8486 83.7461 Cf488.5645 86.7842 m488.3789 85.8604 487.8838 84.8662 487.0449 83.8789 c482.7236 78.7422 471.9375 75.542 467.085 77.5576 C467.0615 77.3623 466.9922 77.1494 467.0039 76.958 c467.3965 70.0186 483.8145 73.4619 489.3955 80.1064 c491.6621 82.7871 491.5332 85.4678 488.5645 86.7842 Cf519.668 91.5498 m519.4727 91.1631 519.2686 90.7705 519.0098 90.4307 c518.5361 89.7773 517.6465 88.8174 516.8311 88.1016 c511.6367 83.4922 502.4932 79.8184 497.9121 80.1299 C497.6514 79.5967 497.4951 79.1133 497.4736 78.667 c497.126 73.3018 511.9785 77.9346 519.1816 84.3232 c519.9912 85.0518 520.8877 85.999 521.3672 86.6523 c522.6963 88.4482 523.377 91.082 519.668 91.5498 Cf545.8496 97.2529 m545.7568 97.2295 545.6641 97.1992 545.583 97.1719 C544.8096 96.3057 543.666 95.208 541.8516 93.8145 c537.4258 90.4307 531.1289 87.0732 526.8076 85.5879 C525.3057 84.0469 524.376 82.7295 524.3242 81.9502 c524.0693 78.7305 536.8027 84.3584 544.2031 90.0381 c547.0283 92.2148 548.3447 93.7393 548.9531 94.6416 c549.709 95.7744 550.9326 98.3027 545.8496 97.2529 CfUu671.9619 353.4097 m671.707 353.3623 671.3379 353.7471 670.9209 354.4243 C671.835 352.377 672.6094 351.1079 673.0713 351.1904 C674.1348 352.833 671.4541 364.3735 669.1094 372.0859 c666.9814 379.1313 665.1572 383.3975 664.1289 385.1602 C665.1572 382.8428 666.4971 379.2695 668 374.3047 c670.333 366.6001 673.0254 355.0518 671.9619 353.4097 Cf677.9805 318.9941 m677.7969 321.3369 677.2539 327.1943 676.1563 331.2529 c675.623 333.2822 675.1494 334.125 674.7588 334.4248 C674.8613 334.125 674.9541 333.8506 675.0469 333.4717 c676.1445 329.4209 676.6875 323.5562 676.873 321.2188 c677.8301 309.0723 676.9063 298.0376 675.082 299.3086 C675.416 298.2231 675.7637 297.4492 676.0977 297.1255 c677.9922 295.416 678.9639 306.6523 677.9805 318.9941 cf673.3018 278.5576 m673.707 276.3291 673.6143 273.1328 673.5684 272.1182 c673.499 270.6553 673.3252 268.2471 672.8857 265.1143 c671.2803 253.5781 667.6641 243.3877 665.5713 243.9307 C665.7002 243.1631 665.8838 242.5215 666.1377 242.1279 c668.0566 239.207 672.2285 250.2695 674.0068 262.8975 c674.4355 266.0283 674.6084 268.4385 674.666 269.8994 c674.7471 271.4316 674.9307 277.9453 673.3018 278.5576 Cf660.2334 225.5605 m660.2695 224.6006 660.1191 223.4932 659.9688 222.5732 c659.6787 220.8457 658.998 217.877 657.4268 213.5723 c653.7744 203.5381 648.2412 194.5381 645.8604 194.3066 C645.8604 193.498 645.9531 192.8447 646.1963 192.4688 c647.8252 189.9053 654.3887 199.9629 658.5361 211.3545 c660.0957 215.6523 660.7881 218.6211 661.0781 220.3604 c661.4238 222.4629 661.667 225.4795 660.2334 225.5605 Cf375.0684 68.0098 m370.4531 68.7715 360.439 72.666 356.1748 75.2422 C355.7524 75.2422 355.4072 75.1729 355.3003 74.9541 c354.4043 72.9785 375.9668 64.3984 378.3828 65.7783 C378.3296 65.9521 378.2051 66.2881 375.0684 68.0098 Cf636.7227 173.3936 m637.4043 175.3223 638.085 178.1182 636.249 177.9678 C636.1094 177.1904 635.8662 176.3408 635.6016 175.6191 c635.0703 174.0869 633.9375 171.4932 631.6494 167.7324 c626.4385 159.1826 619.5996 151.7529 616.8027 151.0889 C616.6641 150.4414 616.6074 149.8809 616.71 149.5215 c617.5195 146.2168 626.3691 155.041 632.7588 165.5137 c635.0469 169.2744 636.168 171.8682 636.7227 173.3936 cf604.8555 136.6172 m603.9775 134.7109 601.8057 131.8281 598.8818 128.6797 c593.2783 122.625 586.207 117.0088 582.8809 115.543 C582.3652 114.6309 582.0596 113.9023 582.083 113.4639 c582.2217 110.8975 592.4355 118.3037 599.9922 126.4492 c602.9609 129.6553 605.168 132.5967 606.0225 134.4971 c607.1318 136.9531 605.8965 136.9238 604.8555 136.6172 Cf394.7319 65.3643 m394.7163 65.374 394.6924 65.3975 394.6787 65.4033 C394.5483 65.3584 394.377 65.3164 394.1558 65.2832 c390.4048 64.8662 379.9067 68.2803 376.186 71.0352 C376.166 71.0254 376.1206 71.0137 376.1108 70.9902 c374.1426 68.4258 390.4048 62.5215 395.2632 63.0645 c397.0537 63.2598 395.7012 64.5879 394.7319 65.3643 cf416.2178 65.0283 m415.752 62.6299 407.9048 63.3525 402.729 65.5479 c401.355 66.1377 400.3384 66.7559 399.604 67.3857 C399.231 66.2012 400.7373 64.6475 403.8306 63.3291 c409.5889 60.8906 418.7363 60.2334 417.2617 63.7002 c417.0942 64.1045 416.7212 64.5547 416.2178 65.0283 Cf439.6797 66.0332 m439.6553 65.8711 439.6475 65.7217 439.5742 65.5713 c437.8828 62.0693 427.4219 61.9434 423.8418 64.7285 C423.79 64.417 423.79 64.1143 423.8906 63.8379 c425.4248 59.748 438.7637 59.3555 440.6875 63.3525 c441.0889 64.1797 440.7568 65.167 439.6797 66.0332 Cf464.3584 67.9795 m464.2842 67.7783 464.1553 67.5928 464.001 67.3975 C463.1445 66.6055 L459.5996 63.9189 451.0078 62.4287 447.7432 63.7568 C447.6523 63.5498 447.5771 63.3525 447.5596 63.1572 c447.3281 59.5049 459.7949 61.0078 464.248 64.3809 C465.1094 65.1787 L465.8945 66.1143 465.8496 67.2568 464.3584 67.9795 Cf488.8887 70.9961 m488.3096 70.4121 487.3174 69.7188 486.0693 69.083 c481.9219 66.957 474.7676 65.0527 471.1299 64.9238 C470.5635 64.4385 470.1348 63.9941 470.0146 63.6826 c469.0371 61.2031 481.2266 63.8145 487.1768 66.8604 c488.5527 67.5654 489.6797 68.3447 490.2051 68.957 c490.5107 69.3027 491.4941 70.7021 488.8887 70.9961 Cf510.834 74.832 m510.5273 74.7568 510.2061 74.6641 509.8818 74.5947 C508.9561 74.0635 507.8486 73.4971 506.3408 72.8281 c503.1807 71.458 499.3779 70.1592 496.1328 69.2217 C492.9307 67.6221 490.5801 66.2012 490.2285 65.7041 C490.2979 65.5264 L491.5791 65.248 500.8926 67.7549 507.4443 70.6094 c511.4063 72.3428 513.209 73.6475 513.5742 74.3066 c514.1914 75.416 511.7539 74.9932 510.834 74.832 Cf568.0342 103.8379 m567.8721 103.7813 567.71 103.6885 567.5479 103.6191 C566.334 102.3877 564.417 100.7256 561.5234 98.6387 c557.0342 95.376 551.3496 92.0293 547.4902 90.1582 C545.5947 88.5234 544.3535 87.252 544.2207 86.7549 c543.7646 84.9883 554.9482 90.8516 562.6367 96.4082 c567.5879 99.9912 569.7793 102.3721 570.1934 103.4043 c570.6973 104.7051 568.9004 104.127 568.0342 103.8379 CfUUU524.751 75.5938 m524.7744 75.5996 524.7861 75.6113 524.7979 75.6113 C524.7168 75.5781 524.6367 75.542 524.5439 75.5029 C524.751 75.5938 LBb1 (Unnamed gradient 154) 524.6699 75.5605 -67.891 0.005859 1 0 0 1 0 0 Bg0.002205 -0.005429 -3.96192 -1.60949 526.6504 76.3652 Xm3122.9924 -7687.541 -3.96192 -1.60949 -2596.3418 7763.9063 Bc0.002205 -0.005429 -3.96192 -1.60949 526.6504 76.3652 Bm3122.9924 -7687.541 -3.96192 -1.60949 526.6523 76.3594 Bcf0 BB527.7432 76.8652 m526.751 76.4443 525.7217 75.9805 524.7979 75.6113 c525.7217 75.9805 526.4033 76.2588 527.7432 76.8652 cBb1 (Unnamed gradient 154) 398.3877 391.0352 -67.891 293.0996 1 0 0 1 0 0 Bg110.3138 -271.5479 -6.67076 -2.70994 401.7227 392.3901 Xm2947.5891 -7255.77 -6.67076 -2.70994 -2545.8662 7648.1602 Bc110.3138 -271.5479 -6.67076 -2.70994 401.7227 392.3901 Bm2947.5891 -7255.77 -6.67076 -2.70994 512.0361 120.8418 Bcf0 BB527.7432 76.8652 m533.9385 79.5225 541.1475 82.9189 546.7734 85.6357 C547.1152 85.8369 L546.2754 85.4834 L534.5654 80.0137 530.1123 77.9346 527.7432 76.8652 cBb1 (Unnamed gradient 154) 419.0869 372.6621 -67.891 271.6934 1 0 0 1 0 0 Bg102.2572 -251.7157 -23.4621 -9.53127 430.8174 377.4277 Xm2965.1023 -7298.8799 -23.4621 -9.53127 -2534.2852 7676.3076 Bc102.2572 -251.7157 -23.4621 -9.53127 430.8174 377.4277 Bm2965.1023 -7298.8799 -23.4621 -9.53127 533.0742 125.7119 Bcf0 BBUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF